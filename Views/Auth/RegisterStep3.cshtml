@{
    Layout = "_AuthLayout";
    ViewData["Title"] = "Register - Step 3";
}

<div class="p-6 h-full animate-slide-in-right">
    <!-- Progress Indicator -->
    <div class="mb-6">
        <div class="flex items-center justify-center space-x-2">
            <div class="w-6 h-6 bg-green-600 rounded-full flex items-center justify-center text-white text-xs font-semibold">✓</div>
            <div class="w-12 h-1 bg-green-600 rounded"></div>
            <div class="w-6 h-6 bg-green-600 rounded-full flex items-center justify-center text-white text-xs font-semibold">✓</div>
            <div class="w-12 h-1 bg-blue-600 rounded"></div>
            <div class="w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center text-white text-xs font-semibold">3</div>
        </div>
        <div class="text-center mt-2 text-xs text-gray-600">Step 3: Email Verification</div>
    </div>

    <!-- Validation Messages -->
    <div id="validationMessages" class="hidden mb-4 rounded-lg bg-red-50 border border-red-200 p-3 animate-slide-down">
        <div class="flex items-center">
            <svg class="w-4 h-4 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
            </svg>
            <h3 class="text-sm font-medium text-red-800">Please fix the following errors:</h3>
        </div>
        <ul id="errorList" class="mt-2 text-xs text-red-700 list-disc pl-5"></ul>
    </div>

    <!-- Success Message -->
    <div id="successMessage" class="hidden mb-4 rounded-lg bg-green-50 border border-green-200 p-3 animate-slide-down">
        <div class="flex items-center">
            <svg class="w-4 h-4 text-green-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
            </svg>
            <p class="text-sm font-medium text-green-800">OTP verified successfully!</p>
        </div>
    </div>

    <!-- OTP Verification Section -->
    <div class="bg-gradient-to-br from-green-50 to-emerald-50 rounded-lg p-6 mb-6">
        <div class="text-center">
            <div class="mx-auto w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mb-4">
                <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"></path>
                    <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"></path>
                </svg>
            </div>
            <h2 class="text-xl font-bold text-gray-800 mb-2">Email Verification</h2>
            <p class="text-gray-600 text-sm mb-6">
                Enter the 6-digit verification code sent to your email address
            </p>
        </div>

        <!-- OTP Input Section -->
        <div class="bg-white rounded-lg p-6 mb-4">
            <label for="otpCode" class="block text-sm font-medium text-gray-700 mb-3 text-center">
                Enter Verification Code
            </label>
            
            <!-- OTP Input Fields -->
            <div class="flex justify-center space-x-3 mb-4">
                <input type="text" id="otp1" maxlength="1" class="w-12 h-12 text-center border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 text-lg font-semibold" />
                <input type="text" id="otp2" maxlength="1" class="w-12 h-12 text-center border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 text-lg font-semibold" />
                <input type="text" id="otp3" maxlength="1" class="w-12 h-12 text-center border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 text-lg font-semibold" />
                <input type="text" id="otp4" maxlength="1" class="w-12 h-12 text-center border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 text-lg font-semibold" />
                <input type="text" id="otp5" maxlength="1" class="w-12 h-12 text-center border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 text-lg font-semibold" />
                <input type="text" id="otp6" maxlength="1" class="w-12 h-12 text-center border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 text-lg font-semibold" />
            </div>
            
            <!-- Resend OTP -->
            <div class="text-center">
                <button id="resendOtpBtn" class="text-green-600 hover:text-green-700 text-sm font-medium underline transition-colors">
                    Resend Code
                </button>
            </div>
        </div>

        <!-- Verify Button -->
        <button id="verifyOtpBtn" class="w-full bg-green-600 text-white py-3 px-4 rounded-lg hover:bg-green-700 transition-colors font-medium text-sm disabled:opacity-50 disabled:cursor-not-allowed" disabled>
            <svg class="w-5 h-5 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
            </svg>
            <span id="verifyButtonText">Verify & Complete Registration</span>
            <svg id="verifySpinner" class="hidden animate-spin -mr-1 ml-2 h-4 w-4 text-white inline" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
        </button>
    </div>

    <!-- Important Notes -->
    <div class="bg-blue-50 rounded-lg p-4 border border-blue-200 mb-6">
        <div class="flex items-start">
            <svg class="w-5 h-5 text-blue-400 mr-3 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
            </svg>
            <div>
                <h4 class="text-sm font-medium text-blue-800 mb-2">Important Notes:</h4>
                <ul class="text-xs text-blue-700 space-y-1">
                    <li>• Check your email inbox and spam folder for the verification code</li>
                    <li>• The code will expire in 10 minutes</li>
                    <li>• If you don't receive the code, click "Resend Code"</li>
                    <li>• Make sure to complete registration within the time limit</li>
                </ul>
            </div>
        </div>
    </div>

    <!-- Navigation Buttons -->
    <div class="flex space-x-3">
        <button id="backButton" class="flex-1 bg-gray-200 text-gray-700 py-3 px-4 rounded-lg hover:bg-gray-300 transition-colors font-medium text-sm">
            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16l-4-4m0 0l4-4m-4 4h18"></path>
            </svg>
            Back to Step 2
        </button>
    </div>
</div>

<style>
    /* Custom styles for OTP verification */
    .processing-glow {
        position: relative;
        overflow: hidden;
    }

    .processing-glow::after {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 300%;
        height: 300%;
        background: rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        transform: translate(-50%, -50%) scale(0);
        animation: glow-animation 1.5s ease-out infinite;
    }

    @@keyframes glow-animation {
        0% {
            transform: translate(-50%, -50%) scale(0);
        }
        50% {
            transform: translate(-50%, -50%) scale(1);
        }
        100% {
            transform: translate(-50%, -50%) scale(0);
        }
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Check if user switched to login (which would clear data)
    const switchedToLogin = localStorage.getItem('switchedToLogin');
    if (switchedToLogin) {
        console.warn('User switched to login, redirecting to registration');
        localStorage.removeItem('switchedToLogin');
        sessionStorage.removeItem('registrationData');
        sessionStorage.removeItem('otpId');
        sessionStorage.removeItem('faceImage');
        localStorage.removeItem('otpCooldownEnd');
        window.location.href = '/Auth/Register';
        return;
    }
    
    // Get OTP ID from session storage
    const otpId = sessionStorage.getItem('otpId');
    console.log('OTP ID retrieved:', otpId);
    
    if (!otpId) {
        console.warn('No OTP ID found, redirecting to step 1');
        clearAllRegistrationData();
        window.location.href = '/Auth/Register';
        return;
    }
    
    // OTP input handling
    const otpInputs = document.querySelectorAll('[id^="otp"]');
    const verifyBtn = document.getElementById('verifyOtpBtn');
    const resendBtn = document.getElementById('resendOtpBtn');
    
    function getOTPValue() {
        return Array.from(otpInputs).map(input => input.value).join('');
    }
    
    function checkOTPComplete() {
        const otpValue = getOTPValue();
        verifyBtn.disabled = otpValue.length !== 6;
    }
    
    // Auto-focus and move to next input
    otpInputs.forEach((input, index) => {
        input.addEventListener('input', function(e) {
            // Only allow numbers
            this.value = this.value.replace(/[^0-9]/g, '');
            
            // Move to next input if current is filled
            if (this.value.length === 1 && index < otpInputs.length - 1) {
                otpInputs[index + 1].focus();
            }
            
            // Check if all inputs are filled
            checkOTPComplete();
        });
        
        input.addEventListener('keydown', function(e) {
            // Move to previous input on backspace
            if (e.key === 'Backspace' && this.value === '' && index > 0) {
                otpInputs[index - 1].focus();
            }
        });
        
        input.addEventListener('paste', function(e) {
            e.preventDefault();
            const paste = (e.clipboardData || window.clipboardData).getData('text');
            const pasteArray = paste.split('').filter(char => /[0-9]/.test(char));
            
            pasteArray.forEach((char, pasteIndex) => {
                if (index + pasteIndex < otpInputs.length) {
                    otpInputs[index + pasteIndex].value = char;
                }
            });
            
            checkOTPComplete();
        });
    });
    
    // Focus first input
    if (otpInputs.length > 0) {
        otpInputs[0].focus();
    }
    
    function displayError(message) {
        const errorList = document.getElementById('errorList');
        const validationMessages = document.getElementById('validationMessages');
        
        if (errorList && validationMessages) {
            errorList.innerHTML = `<li>${message}</li>`;
            validationMessages.classList.remove('hidden');
        }
        
        // Hide success message
        const successMessage = document.getElementById('successMessage');
        if (successMessage) {
            successMessage.classList.add('hidden');
        }
        
        // Scroll to top to show error
        window.scrollTo({ top: 0, behavior: 'smooth' });
    }
    
    function displaySuccess(message) {
        const successMessage = document.getElementById('successMessage');
        if (successMessage) {
            successMessage.querySelector('p').textContent = message;
            successMessage.classList.remove('hidden');
        }
        
        // Hide error messages
        const validationMessages = document.getElementById('validationMessages');
        if (validationMessages) {
            validationMessages.classList.add('hidden');
        }
        
        // Scroll to top to show success
        window.scrollTo({ top: 0, behavior: 'smooth' });
    }
    
    // Verify OTP button
    verifyBtn.addEventListener('click', async function() {
        const otpCode = getOTPValue();
        if (otpCode.length !== 6) {
            displayError('Please enter the complete 6-digit verification code.');
            return;
        }
        
        // Set loading state
        this.disabled = true;
        document.getElementById('verifyButtonText').textContent = 'Verifying...';
        document.getElementById('verifySpinner').classList.remove('hidden');
        
        try {
            // Call verify OTP API
            const result = await verifyOTPAndCompleteRegistration(otpId, otpCode);
            
            if (result.success) {
                displaySuccess('Registration completed successfully! Redirecting to login...');
                
                // Show success animation
                this.classList.add('bg-green-600', 'hover:bg-green-700');
                document.getElementById('verifyButtonText').textContent = 'Registration Complete!';
                
                // Clear all registration data and set completion flag
                clearAllRegistrationData();
                localStorage.setItem('registrationCompleted', 'true');
                
                // Wait for user to see success message then trigger login transition
                setTimeout(() => {
                    triggerLoginTransition();
                }, 2000);
                
            } else {
                displayError(result.message || 'OTP verification failed. Please try again.');
                
                // Reset button state
                this.disabled = false;
                document.getElementById('verifyButtonText').textContent = 'Verify & Complete Registration';
                document.getElementById('verifySpinner').classList.add('hidden');
                
                // Clear OTP inputs for retry
                otpInputs.forEach(input => input.value = '');
                otpInputs[0].focus();
                checkOTPComplete();
            }
            
        } catch (error) {
            console.error('OTP verification failed:', error);
            displayError('Verification failed. Please try again.');
            
            // Reset button state
            this.disabled = false;
            document.getElementById('verifyButtonText').textContent = 'Verify & Complete Registration';
            document.getElementById('verifySpinner').classList.add('hidden');
        }
    });
    
    // Back button
    document.getElementById('backButton').addEventListener('click', function() {
        window.location.href = '/Auth/RegisterStep2';
    });
    
    // Resend OTP button event listener
    if (resendBtn) {
        resendBtn.addEventListener('click', function() {
            if (!this.disabled) {
                resendOTP();
            }
        });
    }
});

// Function to clear all registration data
function clearAllRegistrationData() {
    sessionStorage.removeItem('registrationData');
    sessionStorage.removeItem('otpId');
    sessionStorage.removeItem('faceImage');
    localStorage.removeItem('otpCooldownEnd');
    
    console.log('All registration data cleared from step 3');
}

// Function to trigger login transition with animation
function triggerLoginTransition() {
    console.log('Triggering login transition...');
    
    // Set the registration completion flag
    localStorage.setItem('registrationCompleted', 'true');
    
    // Clear registration data
    clearAllRegistrationData();
    
    // Try to call parent window functions directly (these should be available from the layout)
    try {
        // Method 1: Call the layout's showLogin function directly
        if (typeof window.showLogin === 'function') {
            console.log('Calling window.showLogin directly');
            setTimeout(() => {
                window.showLoginSuccessMessage('Registration completed successfully! Please login with your credentials.');
                window.showLogin();
            }, 100);
            return;
        }
        
        // Method 2: Access the layout functions through window
        if (window.parent && typeof window.parent.showLogin === 'function') {
            console.log('Calling parent.showLogin');
            setTimeout(() => {
                window.parent.showLoginSuccessMessage('Registration completed successfully! Please login with your credentials.');
                window.parent.showLogin();
            }, 100);
            return;
        }
        
        // Method 3: Try to find and click the login tab directly
        const loginTab = document.getElementById('loginTab') || 
                        parent.document.getElementById('loginTab') ||
                        window.parent.document.getElementById('loginTab');
        
        if (loginTab) {
            console.log('Clicking login tab directly');
            setTimeout(() => {
                loginTab.click();
                // Show success message after switching
                setTimeout(() => {
                    if (typeof window.showLoginSuccessMessage === 'function') {
                        window.showLoginSuccessMessage('Registration completed successfully! Please login with your credentials.');
                    }
                }, 200);
            }, 100);
            return;
        }
        
        // Method 4: Dispatch custom event for the layout to handle
        console.log('Dispatching custom event');
        const completionEvent = new CustomEvent('registrationCompleted', {
            detail: { 
                message: 'Registration completed successfully! Please login with your credentials.',
                timestamp: Date.now()
            },
            bubbles: true,
            cancelable: true
        });
        
        // Dispatch on multiple targets to ensure it's caught
        document.dispatchEvent(completionEvent);
        window.dispatchEvent(completionEvent);
        
        if (window.parent && window.parent.document) {
            window.parent.document.dispatchEvent(completionEvent);
            window.parent.dispatchEvent(completionEvent);
        }
        
        // Wait for event handlers to process, then redirect as fallback
        setTimeout(() => {
            console.log('Event handlers should have processed, redirecting as fallback');
            window.location.href = '/Auth/Register';
        }, 300);
        
    } catch (error) {
        console.error('Error in login transition:', error);
        
        // Ultimate fallback - just redirect and let the layout handle it
        setTimeout(() => {
            window.location.href = '/Auth/Register';
        }, 100);
    }
}

// Function to verify OTP and complete registration
async function verifyOTPAndCompleteRegistration(otpId, otpCode) {
    try {
        const apiUrl = '/Auth/VerifyOTPAndCompleteRegistration';
        
        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
        
        const requestData = {
            otp_id: otpId,
            otp_code: otpCode
        };
        
        const requestOptions = {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            body: JSON.stringify(requestData)
        };
        
        if (token) {
            requestOptions.headers["RequestVerificationToken"] = token;
        }

        const response = await fetch(apiUrl, requestOptions);
        const responseText = await response.text();

        if (!response.ok) {
            return { 
                success: false, 
                message: `API Error ${response.status}: ${response.statusText}` 
            };
        }

        let result;
        try {
            result = JSON.parse(responseText);
        } catch (jsonError) {
            return { success: false, message: 'Invalid response format from server' };
        }
        
        return {
            success: result.success || false,
            message: result.message || 'Registration verification completed',
            user: result.user || null
        };
        
    } catch (error) {
        return { 
            success: false, 
            message: `Network Error: ${error.message}` 
        };
    }
}

// Resend OTP functionality
async function resendOTP() {
    const resendBtn = document.getElementById('resendOtpBtn');
    const registrationData = JSON.parse(sessionStorage.getItem('registrationData') || '{}');
    const faceImage = sessionStorage.getItem('faceImage');
    
    if (!registrationData || !faceImage) {
        displayError('Missing registration data. Please start over.');
        setTimeout(() => {
            window.location.href = '/Auth/Register';
        }, 2000);
        return;
    }
    
    // Disable button and show loading
    resendBtn.disabled = true;
    resendBtn.textContent = 'Sending...';
    
    try {
        const result = await sendResendOTP(registrationData, faceImage);
        
        if (result.success) {
            // Update OTP ID if provided
            if (result.otp_id) {
                sessionStorage.setItem('otpId', result.otp_id);
            }
            
            displaySuccess(result.message || 'Verification code sent successfully!');
            
            // Start cooldown timer
            startResendCooldown(60); // 60 seconds cooldown
            
        } else {
            displayError(result.message || 'Failed to resend verification code. Please try again.');
            resendBtn.disabled = false;
            resendBtn.textContent = 'Resend Code';
        }
        
    } catch (error) {
        console.error('Resend OTP failed:', error);
        displayError('Failed to resend verification code. Please try again.');
        resendBtn.disabled = false;
        resendBtn.textContent = 'Resend Code';
    }
}

// Function to call resend OTP API
async function sendResendOTP(registrationData, faceImage) {
    try {
        const apiUrl = '/Auth/SendRegistrationOTP';
        
        const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
        
        const requestData = {
            registration_data: registrationData,
            face_image: faceImage
        };
        
        const requestOptions = {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            body: JSON.stringify(requestData)
        };
        
        if (token) {
            requestOptions.headers["RequestVerificationToken"] = token;
        }

        const response = await fetch(apiUrl, requestOptions);
        const responseText = await response.text();

        if (!response.ok) {
            return { 
                success: false, 
                message: `API Error ${response.status}: ${response.statusText}` 
            };
        }

        let result;
        try {
            result = JSON.parse(responseText);
        } catch (jsonError) {
            return { success: false, message: 'Invalid response format from server' };
        }
        
        return {
            success: result.success || false,
            message: result.message || 'OTP resend completed',
            otp_id: result.otp_id || null
        };
        
    } catch (error) {
        return { 
            success: false, 
            message: `Network Error: ${error.message}` 
        };
    }
}

// Cooldown timer functionality
function startResendCooldown(seconds) {
    const resendBtn = document.getElementById('resendOtpBtn');
    let timeLeft = seconds;
    
    // Store cooldown end time
    const cooldownEnd = Date.now() + (seconds * 1000);
    localStorage.setItem('otpCooldownEnd', cooldownEnd.toString());
    
    const countdown = setInterval(() => {
        resendBtn.textContent = `Resend Code (${timeLeft}s)`;
        resendBtn.disabled = true;
        resendBtn.classList.add('strikethrough-animate', 'active');
        
        timeLeft--;
        
        if (timeLeft < 0) {
            clearInterval(countdown);
            resendBtn.textContent = 'Resend Code';
            resendBtn.disabled = false;
            resendBtn.classList.remove('strikethrough-animate', 'active');
            localStorage.removeItem('otpCooldownEnd');
        }
    }, 1000);
}
</script>