@{
    Layout = "_AuthLayout";
    ViewData["Title"] = "Login";
}

<div class="p-6 h-full">
    <!-- Header -->
    <div class="text-center mb-8">
        <div class="mx-auto w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mb-4">
            <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 8a6 6 0 01-7.743 5.743L10 14l-4 4-4-4 1.257-1.257A6 6 0 1118 8zm-6-2a1 1 0 11-2 0 1 1 0 012 0z" clip-rule="evenodd"></path>
            </svg>
        </div>
        <h2 class="text-2xl font-bold text-gray-800 mb-2">Welcome Back</h2>
        <p class="text-gray-600 text-sm">Sign in to access your attendance dashboard</p>
    </div>

    <!-- Error Message -->
    <div id="loginErrorMessage" class="hidden mb-4 rounded-lg bg-red-50 border border-red-200 p-3 animate-slide-down">
        <div class="flex items-center">
            <svg class="w-4 h-4 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
            </svg>
            <p class="text-sm font-medium text-red-800"></p>
        </div>
    </div>

    <!-- Login Form -->
    <form id="loginForm" class="space-y-6">
        <div>
            <label for="loginEmail" class="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
            <input type="email" id="loginEmail" name="email" required
                   class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" 
                   placeholder="your.email@iskolarngbayan.pup.edu.ph">
        </div>
        
        <div>
            <label for="loginPassword" class="block text-sm font-medium text-gray-700 mb-2">Password</label>
            <div class="relative">
                <input type="password" id="loginPassword" name="password" required
                       class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors pr-10" 
                       placeholder="Enter your password">
                <button type="button" id="toggleLoginPassword" class="absolute right-3 top-3 text-gray-400 hover:text-gray-600 transition-colors">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                    </svg>
                </button>
            </div>
        </div>
        
        <div class="flex items-center justify-between">
            <label class="flex items-center">
                <input type="checkbox" id="rememberMe" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded transition-colors">
                <span class="ml-2 text-sm text-gray-600">Remember me</span>
            </label>
            <a href="#" class="text-sm text-blue-600 hover:text-blue-700 transition-colors">Forgot password?</a>
        </div>
        
        <button type="submit" id="loginButton" class="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed btn-smooth">
            <span id="loginButtonText">Sign In</span>
            <svg id="loginSpinner" class="hidden animate-spin -mr-1 ml-2 h-4 w-4 text-white inline" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
        </button>
    </form>

    <!-- Divider -->
    <div class="mt-6 relative">
        <div class="absolute inset-0 flex items-center">
            <div class="w-full border-t border-gray-300"></div>
        </div>
        <div class="relative flex justify-center text-sm">
            <span class="px-2 bg-white text-gray-500">or</span>
        </div>
    </div>

    <!-- Face Recognition Login -->
    <div class="mt-6">
        <button type="button" id="faceLoginBtn" class="w-full bg-gradient-to-r from-green-600 to-emerald-600 text-white py-3 rounded-lg font-semibold hover:from-green-700 hover:to-emerald-700 transition-all duration-200 btn-smooth">
            <svg class="w-5 h-5 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
            </svg>
            Sign In with Face Recognition
        </button>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    initializeLoginForm();
});

function initializeLoginForm() {
    const loginForm = document.getElementById('loginForm');
    const loginButton = document.getElementById('loginButton');
    const loginButtonText = document.getElementById('loginButtonText');
    const loginSpinner = document.getElementById('loginSpinner');
    const togglePassword = document.getElementById('toggleLoginPassword');
    const passwordField = document.getElementById('loginPassword');
    
    // Password toggle functionality
    if (togglePassword && passwordField) {
        togglePassword.addEventListener('click', function() {
            const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
            passwordField.setAttribute('type', type);
            
            this.innerHTML = type === 'password' ? 
                `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>` :
                `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"></path>
                </svg>`;
        });
    }
    
    // DO NOT add switch to register functionality here
    // This login content is only loaded when switching from register to login tab
    // Adding register switch would cause circular navigation and content flash
    const switchToRegisterBtn = document.getElementById('switchToRegister');
    if (switchToRegisterBtn) {
        // Disable the button to prevent any accidental clicks
        switchToRegisterBtn.style.pointerEvents = 'none';
        switchToRegisterBtn.style.opacity = '0.5';
        console.log('Register button disabled to prevent tab switching conflicts');
    }
    
    // Face recognition login
    const faceLoginBtn = document.getElementById('faceLoginBtn');
    if (faceLoginBtn) {
        faceLoginBtn.addEventListener('click', function() {
            alert('Face recognition login feature coming soon!');
        });
    }
    
    // Form submission
    if (loginForm) {
        loginForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Set loading state
            if (loginButton) {
                loginButton.disabled = true;
                if (loginButtonText) loginButtonText.textContent = 'Signing In...';
                if (loginSpinner) loginSpinner.classList.remove('hidden');
            }
            
            // Hide previous messages
            const errorMessage = document.getElementById('loginErrorMessage');
            if (errorMessage) errorMessage.classList.add('hidden');
            
            try {
                // Simulate login API call
                await new Promise(resolve => setTimeout(resolve, 2000));
                
                const email = document.getElementById('loginEmail')?.value;
                const password = document.getElementById('loginPassword')?.value;
                
                if (email && password) {
                    // Success simulation
                    if (loginButtonText) loginButtonText.textContent = 'Login Successful!';
                    if (loginButton) {
                        loginButton.classList.remove('bg-blue-600', 'hover:bg-blue-700');
                        loginButton.classList.add('bg-green-600', 'hover:bg-green-700');
                    }
                    
                    setTimeout(() => {
                        alert('Redirecting to attendance dashboard...');
                    }, 1000);
                } else {
                    showLoginError('Please enter both email and password.');
                }
                
            } catch (error) {
                showLoginError('Login failed. Please try again.');
            } finally {
                // Reset loading state only if not successful
                const email = document.getElementById('loginEmail')?.value;
                const password = document.getElementById('loginPassword')?.value;
                
                if (!email || !password) {
                    setTimeout(() => {
                        if (loginButton) {
                            loginButton.disabled = false;
                            loginButton.classList.remove('bg-green-600', 'hover:bg-green-700');
                            loginButton.classList.add('bg-blue-600', 'hover:bg-blue-700');
                        }
                        if (loginButtonText) loginButtonText.textContent = 'Sign In';
                        if (loginSpinner) loginSpinner.classList.add('hidden');
                    }, 1000);
                }
            }
        });
    }
    
    function showLoginError(message) {
        const errorMessage = document.getElementById('loginErrorMessage');
        if (errorMessage) {
            const errorText = errorMessage.querySelector('p');
            if (errorText) errorText.textContent = message;
            errorMessage.classList.remove('hidden');
        }
        
        // Scroll to show message
        setTimeout(() => {
            window.scrollTo({ top: 0, behavior: 'smooth' });
        }, 100);
    }
    
    // Pre-fill for testing
    const emailField = document.getElementById('loginEmail');
    const passwordFieldForPrefill = document.getElementById('loginPassword');
    
    if (emailField) emailField.value = 'johnmathewcparocha@iskolarngbayan.pup.edu.ph';
    if (passwordFieldForPrefill) passwordFieldForPrefill.value = 'TestPass123!';
    
    console.log('Login form initialized successfully');
}
</script>
