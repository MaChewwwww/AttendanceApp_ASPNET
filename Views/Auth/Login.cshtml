@{
    Layout = "_AuthLayout";
    ViewData["Title"] = "Login";
}

<div class="p-6 h-full">
    <!-- Header -->
    <div class="text-center mb-8">
        <div class="mx-auto w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mb-4">
            <svg class="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M18 8a6 6 0 01-7.743 5.743L10 14l-4 4-4-4 1.257-1.257A6 6 0 1118 8zm-6-2a1 1 0 11-2 0 1 1 0 012 0z" clip-rule="evenodd"></path>
            </svg>
        </div>
        <h2 class="text-2xl font-bold text-gray-800 mb-2">Welcome Back</h2>
        <p class="text-gray-600 text-sm">Sign in to access your attendance dashboard</p>
    </div>

    <!-- Error Message -->
    <div id="loginErrorMessage" class="hidden mb-4 rounded-lg bg-red-50 border border-red-200 p-3 animate-slide-down">
        <div class="flex items-center">
            <svg class="w-4 h-4 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
            </svg>
            <p class="text-sm font-medium text-red-800"></p>
        </div>
    </div>

    <!-- Success Message -->
    <div id="loginSuccessMessage" class="hidden mb-4 rounded-lg bg-green-50 border border-green-200 p-3 animate-slide-down">
        <div class="flex items-center">
            <svg class="w-4 h-4 text-green-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
            </svg>
            <p class="text-sm font-medium text-green-800">Login successful! Redirecting to dashboard...</p>
        </div>
    </div>

    <!-- Login Form -->
    <div id="loginForm" class="space-y-6">
        @Html.AntiForgeryToken()
        <div>
            <label for="loginEmail" class="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
            <input type="email" id="loginEmail" name="email" required
                   class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors" 
                   placeholder="your.email@iskolarngbayan.pup.edu.ph">
        </div>
        
        <div>
            <label for="loginPassword" class="block text-sm font-medium text-gray-700 mb-2">Password</label>
            <div class="relative">
                <input type="password" id="loginPassword" name="password" required
                       class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors pr-10" 
                       placeholder="Enter your password">
                <button type="button" onclick="togglePassword()" class="absolute right-3 top-3 text-gray-400 hover:text-gray-600 transition-colors">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                    </svg>
                </button>
            </div>
        </div>
        
        <div class="flex items-center justify-between">
            <label class="flex items-center">
                <input type="checkbox" id="rememberMe" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded transition-colors">
                <span class="ml-2 text-sm text-gray-600">Remember me</span>
            </label>
            <a href="#" class="text-sm text-blue-600 hover:text-blue-700 transition-colors">Forgot password?</a>
        </div>
        
        <!-- Simplified Login Button with inline onclick -->
        <button type="button" id="loginButton" onclick="performLogin()" 
                class="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
            <span id="loginButtonText">Sign In</span>
        </button>
    </div>

    <!-- Divider -->
    <div class="mt-6 relative">
        <div class="absolute inset-0 flex items-center">
            <div class="w-full border-t border-gray-300"></div>
        </div>
        <div class="relative flex justify-center text-sm">
            <span class="px-2 bg-white text-gray-500">New to AttendanceApp?</span>
        </div>
    </div>

    <!-- Sign Up Link -->
    <div class="mt-6 text-center">
        <p class="text-sm text-gray-600">
            Don't have an account? 
            <button onclick="goToRegister()" class="text-blue-600 hover:text-blue-700 font-medium underline cursor-pointer transition-colors">Create account</button>
        </p>
    </div>
</div>

<script>
// Global functions - much simpler approach
function togglePassword() {
    const passwordField = document.getElementById('loginPassword');
    const type = passwordField.type === 'password' ? 'text' : 'password';
    passwordField.type = type;
}

function goToRegister() {
    window.location.href = '/Auth/Register';
}

// Main login function - now global and simple
async function performLogin() {
    console.log('=== PERFORM LOGIN CALLED ===');
    
    const loginButton = document.getElementById('loginButton');
    const loginButtonText = document.getElementById('loginButtonText');
    
    // Set loading state
    loginButton.disabled = true;
    loginButtonText.textContent = 'Signing In...';
    
    // Hide previous messages
    hideMessages();
    
    try {
        const email = document.getElementById('loginEmail').value.trim();
        const password = document.getElementById('loginPassword').value;
        
        console.log('Email:', email);
        console.log('Password length:', password.length);
        
        // Client-side validation
        if (!email || !password) {
            showLoginError('Please enter both email and password.');
            resetLoginButton();
            return;
        }
        
        console.log('Starting API call...');
        
        // Validate with API
        const validationResult = await validateLoginWithAPI({ email, password });
        
        console.log('API result:', validationResult);
        
        if (validationResult.success) {
            // Success
            showLoginSuccess();
            loginButtonText.textContent = 'Login Successful!';
            loginButton.classList.remove('bg-blue-600', 'hover:bg-blue-700');
            loginButton.classList.add('bg-green-600', 'hover:bg-green-700');
            
            setTimeout(() => {
                window.location.href = '/Dashboard';
            }, 1500);
        } else {
            // Failed
            const errorMessages = validationResult.errors && validationResult.errors.length > 0 
                ? validationResult.errors.join(' ') 
                : validationResult.message || 'Login validation failed.';
            
            showLoginError(errorMessages);
            resetLoginButton();
        }
        
    } catch (error) {
        console.error('Login error:', error);
        showLoginError('Login failed. Please try again.');
        resetLoginButton();
    }
}

// API validation function
async function validateLoginWithAPI(loginData) {
    try {
        console.log('Making API call...');
        
        const apiUrl = '/Auth/ValidateLogin';
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        
        const requestOptions = {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
                "RequestVerificationToken": token
            },
            body: JSON.stringify(loginData)
        };

        const response = await fetch(apiUrl, requestOptions);
        
        console.log('Response status:', response.status);
        
        if (!response.ok) {
            const errorText = await response.text();
            return { 
                success: false, 
                errors: [`Server Error ${response.status}: ${response.statusText}`] 
            };
        }

        const responseText = await response.text();
        console.log('Response text:', responseText);
        
        const result = JSON.parse(responseText);
        
        return {
            success: result.success || false,
            message: result.message || '',
            errors: result.errors || []
        };
        
    } catch (error) {
        console.error('API error:', error);
        return { 
            success: false, 
            errors: [`Network Error: ${error.message}`] 
        };
    }
}

function resetLoginButton() {
    setTimeout(() => {
        const loginButton = document.getElementById('loginButton');
        const loginButtonText = document.getElementById('loginButtonText');
        
        loginButton.disabled = false;
        loginButton.classList.remove('bg-green-600', 'hover:bg-green-700');
        loginButton.classList.add('bg-blue-600', 'hover:bg-blue-700');
        loginButtonText.textContent = 'Sign In';
    }, 1000);
}

function showLoginError(message) {
    const errorMessage = document.getElementById('loginErrorMessage');
    const errorText = errorMessage.querySelector('p');
    errorText.textContent = message;
    errorMessage.classList.remove('hidden');
}

function showLoginSuccess() {
    const successMessage = document.getElementById('loginSuccessMessage');
    successMessage.classList.remove('hidden');
}

function hideMessages() {
    const errorMessage = document.getElementById('loginErrorMessage');
    const successMessage = document.getElementById('loginSuccessMessage');
    
    errorMessage.classList.add('hidden');
    successMessage.classList.add('hidden');
}

// Add Enter key support
document.addEventListener('DOMContentLoaded', function() {
    const emailField = document.getElementById('loginEmail');
    const passwordField = document.getElementById('loginPassword');
    
    function handleEnterKey(event) {
        if (event.key === 'Enter') {
            performLogin();
        }
    }
    
    emailField.addEventListener('keypress', handleEnterKey);
    passwordField.addEventListener('keypress', handleEnterKey);
    
    console.log('Login form initialized');
});
</script>
