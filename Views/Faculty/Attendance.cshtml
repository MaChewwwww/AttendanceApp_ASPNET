@{
    ViewData["Title"] = "Faculty Attendance Management";
    Layout = "_Layout";
}

@{
    // Helper functions for faculty attendance status display
    string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "present" or "1" => "bg-green-100 text-green-800",
            "late" or "2" => "bg-yellow-100 text-yellow-800", 
            "absent" or "0" => "bg-red-100 text-red-800",
            "excused" or "3" => "bg-blue-100 text-blue-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    string GetStatusIcon(string status)
    {
        return status?.ToLower() switch
        {
            "present" or "1" => "fas fa-check-circle",
            "late" or "2" => "fas fa-clock",
            "absent" or "0" => "fas fa-times-circle",
            "excused" or "3" => "fas fa-user-clock",
            _ => "fas fa-question-circle"
        };
    }

    string GetStatusDisplayText(string status)
    {
        return status?.ToLower() switch
        {
            "present" or "1" => "Present",
            "late" or "2" => "Late", 
            "absent" or "0" => "Absent",
            "excused" or "3" => "Excused",
            _ => $"Unknown ({status})"
        };
    }
}

<style>
    @@keyframes slideInFromTop {
        0% {
            opacity: 0;
            transform: translateY(-20px);
        }
        100% {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeIn {
        0% {
            opacity: 0;
        }
        100% {
            opacity: 1;
        }
    }

    .slide-in {
        animation: slideInFromTop 0.6s ease-out;
    }

    .fade-in {
        animation: fadeIn 0.8s ease-out;
    }

    .hover-scale {
        transition: transform 0.2s ease-in-out;
    }

    .hover-scale:hover {
        transform: scale(1.02);
    }

    .filter-modal-entrance {
        animation: filterModalEntrance 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    }
    
    @@keyframes filterModalEntrance {
        0% { 
            opacity: 0;
            transform: scale(0.95) translateY(-10px);
        }
        100% { 
            opacity: 1;
            transform: scale(1) translateY(0);
        }
    }

    .attendance-table {
        min-width: 100%;
        table-layout: fixed;
    }

    @@media (max-width: 768px) {
        .attendance-table {
            min-width: 900px;
        }
        
        .attendance-table th,
        .attendance-table td {
            padding: 8px 12px;
            font-size: 0.875rem;
        }
    }

    .font-mono {
        font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
        padding: 2px 6px;
        border-radius: 4px;
    }

    .pagination-button {
        transition: all 0.2s ease-in-out;
    }

    .pagination-button:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .filter-badge {
        animation: filterBadgeEntrance 0.3s ease-out;
    }

    @@keyframes filterBadgeEntrance {
        0% {
            opacity: 0;
            transform: scale(0.8);
        }
        100% {
            opacity: 1;
            transform: scale(1);
        }
    }
</style>

<div class="space-y-6 slide-in">
    <!-- Page Header -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div class="flex items-center justify-between">
            <div>
                <h1 class="text-2xl font-bold text-gray-900">Faculty Attendance Management</h1>
                <p class="text-gray-600 mt-1">View and manage attendance records for all your courses</p>
            </div>
            <div class="text-right">
                <div class="text-sm text-gray-500">Last updated</div>
                <div class="text-lg font-semibold text-gray-900">@DateTime.Now.ToString("MMM dd, yyyy")</div>
            </div>
        </div>
    </div>

    <div id="errorMessage" class="bg-red-50 border border-red-200 rounded-lg p-4 hidden">
        <div class="flex items-center">
            <i class="fas fa-exclamation-triangle text-red-600 mr-3"></i>
            <div>
                <h3 class="text-red-800 font-medium">Unable to Load Attendance Data</h3>
                <p id="errorText" class="text-red-700 text-sm mt-1"></p>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    <div id="loadingState" class="bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center">
        <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <i class="fas fa-spinner fa-spin text-blue-600 text-2xl"></i>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">Loading Attendance Data</h3>
        <p class="text-gray-600">Please wait while we fetch your attendance records...</p>
    </div>

    <!-- Statistics Cards -->
    <div id="statisticsCards" class="grid grid-cols-1 md:grid-cols-4 gap-6 fade-in hidden">
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover-scale">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-gray-600">Total Students</p>
                    <p id="totalStudents" class="text-2xl font-bold text-gray-900">0</p>
                </div>
                <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                    <i class="fas fa-users text-blue-600 text-xl"></i>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover-scale">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-gray-600">Present Today</p>
                    <p id="presentCount" class="text-2xl font-bold text-green-600">0</p>
                </div>
                <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                    <i class="fas fa-check-circle text-green-600 text-xl"></i>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover-scale">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-gray-600">Late Arrivals</p>
                    <p id="lateCount" class="text-2xl font-bold text-yellow-600">0</p>
                </div>
                <div class="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
                    <i class="fas fa-clock text-yellow-600 text-xl"></i>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 hover-scale">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-sm font-medium text-gray-600">Absent</p>
                    <p id="absentCount" class="text-2xl font-bold text-red-600">0</p>
                </div>
                <div class="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
                    <i class="fas fa-times-circle text-red-600 text-xl"></i>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Table Section -->
    <div id="attendanceTableSection" class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 fade-in hidden">
        <!-- Table Header with Controls -->
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
            <div>
                <h3 class="text-lg font-semibold text-gray-900">Attendance Records</h3>
                <p class="text-sm text-gray-600" id="recordsInfo">Loading records...</p>
            </div>
            
            <!-- Filter and Sort Controls -->
            <div class="flex flex-wrap gap-3">
                <div id="activeFilters" class="flex flex-wrap gap-2 hidden">
                    <!-- Active filter badges will be inserted here -->
                </div>

                <button onclick="openFilterModal()" class="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200">
                    <i class="fas fa-filter mr-2"></i>
                    <span>Filter</span>
                    <span id="filterCount" class="ml-2 bg-blue-800 text-white text-xs rounded-full px-2 py-1 hidden">0</span>
                </button>

                <button onclick="openSortModal()" class="flex items-center px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors duration-200">
                    <i class="fas fa-sort mr-2"></i>
                    <span>Sort</span>
                </button>

                <button onclick="exportToCSV()" class="flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200">
                    <i class="fas fa-download mr-2"></i>
                    <span>Export CSV</span>
                </button>

                <button id="clearFiltersBtn" onclick="clearAllFilters()" class="flex items-center px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors duration-200 hidden">
                    <i class="fas fa-times mr-2"></i>
                    <span>Clear Filters</span>
                </button>
            </div>
        </div>

        <!-- Table Container -->
        <div class="overflow-x-auto">
            <table class="w-full divide-y divide-gray-200 attendance-table">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/8">Date</th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/6">Course</th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/8">Student ID</th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/4">Student Name</th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/8">Section</th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/8">Status</th>
                        <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/8">Time</th>
                    </tr>
                </thead>
                <tbody id="attendanceTableBody" class="bg-white divide-y divide-gray-200">
                    <!-- Records will be populated by JavaScript -->
                </tbody>
            </table>
        </div>

        <!-- Record Count Display -->
        <div class="flex justify-between items-center mt-6">
            <div class="text-sm text-gray-700">
                Total: <span id="totalRecordsCount">0</span> records
            </div>
        </div>
    </div>

    <!-- No Data State -->
    <div id="noDataState" class="bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center fade-in hidden">
        <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <i class="fas fa-calendar-times text-gray-400 text-2xl"></i>
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">No Attendance Records Found</h3>
        <p class="text-gray-600">No attendance records are available for your courses yet.</p>
    </div>
</div>

<!-- Filter Modal -->
<div id="filterModal" class="fixed inset-0 bg-gray-900 bg-opacity-75 overflow-y-auto h-full w-full hidden flex items-center justify-center backdrop-blur-sm">
    <div id="filterModalContent" class="modal-content relative mx-auto p-6 border w-full max-w-lg shadow-2xl rounded-xl bg-white transform transition-all duration-300 scale-95 opacity-0 m-4">
        <div class="flex items-center justify-between mb-6">
            <h3 class="text-lg font-bold text-gray-800">
                <i class="fas fa-filter mr-2 text-blue-600"></i>
                Filter Attendance Records
            </h3>
            <button onclick="closeFilterModal()" class="text-gray-400 hover:text-gray-600">
                <i class="fas fa-times text-xl"></i>
            </button>
        </div>

        <div class="space-y-6">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Date Range</label>
                <div class="grid grid-cols-2 gap-3">
                    <div>
                        <label class="block text-xs text-gray-500 mb-1">From</label>
                        <input type="date" id="dateFrom" class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm">
                    </div>
                    <div>
                        <label class="block text-xs text-gray-500 mb-1">To</label>
                        <input type="date" id="dateTo" class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm">
                    </div>
                </div>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Course</label>
                <select id="courseFilter" class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm">
                    <option value="">All Courses</option>
                </select>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Section</label>
                <select id="sectionFilter" class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm">
                    <option value="">All Sections</option>
                </select>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                <select id="statusFilter" class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm">
                    <option value="">All Statuses</option>
                    <option value="present">Present</option>
                    <option value="late">Late</option>
                    <option value="absent">Absent</option>
                    <option value="excused">Excused</option>
                </select>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Student</label>
                <input type="text" id="studentFilter" placeholder="Search by student name or ID" class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm">
            </div>
        </div>

        <div class="flex justify-end space-x-3 mt-8">
            <button onclick="clearFilters()" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors">
                Clear Filters
            </button>
            <button onclick="applyFilters()" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                Apply Filters
            </button>
        </div>
    </div>
</div>

<!-- Sort Modal -->
<div id="sortModal" class="fixed inset-0 bg-gray-900 bg-opacity-75 overflow-y-auto h-full w-full hidden flex items-center justify-center backdrop-blur-sm">
    <div id="sortModalContent" class="modal-content relative mx-auto p-6 border w-full max-w-md shadow-2xl rounded-xl bg-white transform transition-all duration-300 scale-95 opacity-0 m-4">
        <div class="flex items-center justify-between mb-6">
            <h3 class="text-lg font-bold text-gray-800">
                <i class="fas fa-sort mr-2 text-gray-600"></i>
                Sort Records
            </h3>
            <button onclick="closeSortModal()" class="text-gray-400 hover:text-gray-600">
                <i class="fas fa-times text-xl"></i>
            </button>
        </div>

        <div class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Sort By</label>
                <select id="sortBy" class="w-full border border-gray-300 rounded-md px-3 py-2 text-sm">
                    <option value="date">Date</option>
                    <option value="course">Course</option>
                    <option value="studentName">Student Name</option>
                    <option value="studentId">Student ID</option>
                    <option value="section">Section</option>
                    <option value="status">Status</option>
                </select>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Direction</label>
                <div class="space-y-2">
                    <label class="flex items-center">
                        <input type="radio" name="sortDirection" value="asc" class="mr-2">
                        <span class="text-sm">Ascending (A-Z, Oldest first)</span>
                    </label>
                    <label class="flex items-center">
                        <input type="radio" name="sortDirection" value="desc" class="mr-2" checked>
                        <span class="text-sm">Descending (Z-A, Newest first)</span>
                    </label>
                </div>
            </div>
        </div>

        <div class="flex justify-end space-x-3 mt-8">
            <button onclick="closeSortModal()" class="px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors">
                Cancel
            </button>
            <button onclick="applySort()" class="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700 transition-colors">
                Apply Sort
            </button>
        </div>
    </div>
</div>

@section Scripts {
<script>
    // Faculty attendance management variables
    let currentFilters = {
        dateFrom: '',
        dateTo: '',
        course: '',
        section: '',
        status: '',
        student: ''
    };
    let currentSort = {
        column: 'date',
        direction: 'desc'
    };
    let allRecords = [];
    let filteredRecords = [];
    let facultyAttendanceData = null;

    document.addEventListener('DOMContentLoaded', function() {
        console.log('Faculty Attendance page loaded');
        initializePage();
    });

    async function initializePage() {
        try {
            // Show loading state
            showElement('loadingState');
            hideElement('errorMessage');
            hideElement('noDataState');
            hideElement('statisticsCards');
            hideElement('attendanceTableSection');

            // Fetch faculty attendance data
            await fetchFacultyAttendanceData();
            
        } catch (error) {
            console.error('Error initializing page:', error);
            showError('Failed to initialize page: ' + error.message);
        }
    }

    async function fetchFacultyAttendanceData() {
        try {
            const response = await fetch('/Faculty/GetAttendanceData', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            
            if (!data.success) {
                throw new Error(data.message || 'Failed to fetch attendance data');
            }

            // Process the attendance data
            facultyAttendanceData = data;
            allRecords = data.attendance_records || [];
            
            console.log('Faculty attendance data loaded:', allRecords.length, 'records');
            
            // Initialize the interface
            hideElement('loadingState');
            
            if (allRecords.length === 0) {
                showElement('noDataState');
            } else {
                showElement('statisticsCards');
                showElement('attendanceTableSection');
                
                updateStatistics();
                populateFilterOptions();
                applyFiltersAndSort();
                showAllFilteredRecords();
            }
            
        } catch (error) {
            console.error('Error fetching faculty attendance data:', error);
            hideElement('loadingState');
            showError(error.message);
        }
    }

    function updateStatistics() {
        if (!facultyAttendanceData || !facultyAttendanceData.attendance_statistics) {
            return;
        }

        const stats = facultyAttendanceData.attendance_statistics;
        
        document.getElementById('totalStudents').textContent = stats.total_students || 0;
        document.getElementById('presentCount').textContent = stats.present_count || 0;
        document.getElementById('lateCount').textContent = stats.late_count || 0;
        document.getElementById('absentCount').textContent = stats.absent_count || 0;
    }

    function populateFilterOptions() {
        // Populate course filter
        const courseFilter = document.getElementById('courseFilter');
        const courses = [...new Set(allRecords.map(r => r.course_name))].filter(Boolean).sort();
        
        courseFilter.innerHTML = '<option value="">All Courses</option>';
        courses.forEach(course => {
            const option = document.createElement('option');
            option.value = course;
            option.textContent = course;
            courseFilter.appendChild(option);
        });

        // Populate section filter
        const sectionFilter = document.getElementById('sectionFilter');
        const sections = [...new Set(allRecords.map(r => r.section_name))].filter(Boolean).sort();
        
        sectionFilter.innerHTML = '<option value="">All Sections</option>';
        sections.forEach(section => {
            const option = document.createElement('option');
            option.value = section;
            option.textContent = section;
            sectionFilter.appendChild(option);
        });
    }

    function applyFilters() {
        currentFilters.dateFrom = document.getElementById('dateFrom').value;
        currentFilters.dateTo = document.getElementById('dateTo').value;
        currentFilters.course = document.getElementById('courseFilter').value;
        currentFilters.section = document.getElementById('sectionFilter').value;
        currentFilters.status = document.getElementById('statusFilter').value;
        currentFilters.student = document.getElementById('studentFilter').value.toLowerCase();

        applyFiltersAndSort();
        showAllFilteredRecords();
        updateActiveFiltersDisplay();
        updateFilterCount();
        
        window.closeFilterModal();
    }

    function applySort() {
        const sortBy = document.getElementById('sortBy').value;
        const sortDirection = document.querySelector('input[name="sortDirection"]:checked').value;
        
        currentSort = { column: sortBy, direction: sortDirection };
        
        applyFiltersAndSort();
        showAllFilteredRecords();
        
        window.closeSortModal();
    }

    function applyFiltersAndSort() {
        // Start with all records
        filteredRecords = [...allRecords];

        // Apply filters
        filteredRecords = filteredRecords.filter(record => {
            // Date range filter
            if (currentFilters.dateFrom || currentFilters.dateTo) {
                const recordDate = new Date(record.attendance_date);
                if (currentFilters.dateFrom && recordDate < new Date(currentFilters.dateFrom)) return false;
                if (currentFilters.dateTo && recordDate > new Date(currentFilters.dateTo)) return false;
            }

            // Course filter
            if (currentFilters.course && record.course_name !== currentFilters.course) return false;

            // Section filter
            if (currentFilters.section && record.section_name !== currentFilters.section) return false;

            // Status filter
            if (currentFilters.status) {
                const recordStatus = record.status?.toLowerCase();
                const filterStatus = currentFilters.status.toLowerCase();
                
                let statusMatch = false;
                if ((filterStatus === 'present' && (recordStatus === 'present' || recordStatus === '1')) ||
                    (filterStatus === 'late' && (recordStatus === 'late' || recordStatus === '2')) ||
                    (filterStatus === 'absent' && (recordStatus === 'absent' || recordStatus === '0')) ||
                    (filterStatus === 'excused' && (recordStatus === 'excused' || recordStatus === '3'))) {
                    statusMatch = true;
                }
                if (!statusMatch) return false;
            }

            // Student filter
            if (currentFilters.student) {
                const studentName = (record.student_name || '').toLowerCase();
                const studentId = (record.student_id || '').toString().toLowerCase();
                if (!studentName.includes(currentFilters.student) && !studentId.includes(currentFilters.student)) {
                    return false;
                }
            }

            return true;
        });

        // Apply sorting
        filteredRecords.sort((a, b) => {
            let aValue, bValue;
            
            switch(currentSort.column) {
                case 'date':
                    aValue = new Date(a.attendance_date);
                    bValue = new Date(b.attendance_date);
                    break;
                case 'course':
                    aValue = a.course_name?.toLowerCase() || '';
                    bValue = b.course_name?.toLowerCase() || '';
                    break;
                case 'studentName':
                    aValue = a.student_name?.toLowerCase() || '';
                    bValue = b.student_name?.toLowerCase() || '';
                    break;
                case 'studentId':
                    aValue = a.student_id?.toString() || '';
                    bValue = b.student_id?.toString() || '';
                    break;
                case 'section':
                    aValue = a.section_name?.toLowerCase() || '';
                    bValue = b.section_name?.toLowerCase() || '';
                    break;
                case 'status':
                    aValue = a.status?.toLowerCase() || '';
                    bValue = b.status?.toLowerCase() || '';
                    break;
                default:
                    return 0;
            }
            
            if (aValue < bValue) return currentSort.direction === 'asc' ? -1 : 1;
            if (aValue > bValue) return currentSort.direction === 'asc' ? 1 : -1;
            return 0;
        });

        updateRecordCounts();
    }

    function showAllFilteredRecords() {
        const tbody = document.getElementById('attendanceTableBody');
        tbody.innerHTML = '';
        
        filteredRecords.forEach(record => {
            const row = createTableRow(record);
            tbody.appendChild(row);
        });
        
        updateRecordCounts();
    }

    function createTableRow(record) {
        const row = document.createElement('tr');
        row.className = 'hover:bg-gray-50 attendance-row';
        
        const date = new Date(record.attendance_date);
        const formattedDate = date.toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'short', 
            day: 'numeric' 
        });
        
        const statusClass = getStatusBadgeClass(record.status);
        const statusIcon = getStatusIcon(record.status);
        const statusText = getStatusDisplayText(record.status);
        
        const timeIn = record.time_in || 'N/A';
        
        row.innerHTML = `
            <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-900">${formattedDate}</td>
            <td class="px-4 py-4 text-sm text-gray-900">
                <div class="font-medium">${record.course_name || 'N/A'}</div>
                <div class="text-xs text-gray-500 mt-1">${record.course_code || ''}</div>
            </td>
            <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-900 font-mono">${record.student_id || 'N/A'}</td>
            <td class="px-4 py-4 text-sm text-gray-900">
                <div class="font-medium">${record.student_name || 'N/A'}</div>
                <div class="text-xs text-gray-500 mt-1">${record.student_email || ''}</div>
            </td>
            <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-900">${record.section_name || 'N/A'}</td>
            <td class="px-4 py-4 whitespace-nowrap">
                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${statusClass}">
                    <i class="${statusIcon} mr-1"></i>
                    ${statusText}
                </span>
            </td>
            <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-900">${timeIn}</td>
        `;
        
        return row;
    }

    // Helper functions matching the C# backend
    function getStatusBadgeClass(status) {
        const s = status?.toLowerCase();
        if (s === 'present' || s === '1') return 'bg-green-100 text-green-800';
        if (s === 'late' || s === '2') return 'bg-yellow-100 text-yellow-800';
        if (s === 'absent' || s === '0') return 'bg-red-100 text-red-800';
        if (s === 'excused' || s === '3') return 'bg-blue-100 text-blue-800';
        return 'bg-gray-100 text-gray-800';
    }

    function getStatusIcon(status) {
        const s = status?.toLowerCase();
        if (s === 'present' || s === '1') return 'fas fa-check-circle';
        if (s === 'late' || s === '2') return 'fas fa-clock';
        if (s === 'absent' || s === '0') return 'fas fa-times-circle';
        if (s === 'excused' || s === '3') return 'fas fa-user-clock';
        return 'fas fa-question-circle';
    }

    function getStatusDisplayText(status) {
        const s = status?.toLowerCase();
        if (s === 'present' || s === '1') return 'Present';
        if (s === 'late' || s === '2') return 'Late';
        if (s === 'absent' || s === '0') return 'Absent';
        if (s === 'excused' || s === '3') return 'Excused';
        return `Unknown (${status})`;
    }

    // ...existing code... (rest of the JavaScript functions remain the same as AttendanceHistory.cshtml)
    
    function updateRecordCounts() {
        document.getElementById('recordsInfo').textContent = 
            `Showing ${filteredRecords.length} of ${allRecords.length} records`;
        document.getElementById('totalRecordsCount').textContent = filteredRecords.length;
    }

    function clearFilters() {
        document.getElementById('dateFrom').value = '';
        document.getElementById('dateTo').value = '';
        document.getElementById('courseFilter').value = '';
        document.getElementById('sectionFilter').value = '';
        document.getElementById('statusFilter').value = '';
        document.getElementById('studentFilter').value = '';
    }

    function clearAllFilters() {
        clearFilters();
        currentFilters = {
            dateFrom: '',
            dateTo: '',
            course: '',
            section: '',
            status: '',
            student: ''
        };
        applyFiltersAndSort();
        showAllFilteredRecords();
        updateActiveFiltersDisplay();
        updateFilterCount();
    }

    function updateActiveFiltersDisplay() {
        const container = document.getElementById('activeFilters');
        const clearBtn = document.getElementById('clearFiltersBtn');
        
        container.innerHTML = '';
        
        const activeFilterCount = Object.values(currentFilters).filter(v => v !== '').length;
        
        if (activeFilterCount === 0) {
            container.classList.add('hidden');
            clearBtn.classList.add('hidden');
            return;
        }

        container.classList.remove('hidden');
        clearBtn.classList.remove('hidden');

        Object.entries(currentFilters).forEach(([key, value]) => {
            if (value) {
                const badge = document.createElement('span');
                badge.className = 'inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 filter-badge';
                
                let displayText = '';
                switch(key) {
                    case 'dateFrom': displayText = `From: ${value}`; break;
                    case 'dateTo': displayText = `To: ${value}`; break;
                    case 'course': displayText = `Course: ${value}`; break;
                    case 'section': displayText = `Section: ${value}`; break;
                    case 'status': displayText = `Status: ${value}`; break;
                    case 'student': displayText = `Student: ${value}`; break;
                }
                
                badge.innerHTML = `${displayText} <button onclick="removeFilter('${key}')" class="ml-1 text-blue-600 hover:text-blue-800"><i class="fas fa-times"></i></button>`;
                container.appendChild(badge);
            }
        });
    }

    function removeFilter(filterKey) {
        currentFilters[filterKey] = '';
        
        const fieldMap = {
            'dateFrom': 'dateFrom',
            'dateTo': 'dateTo',
            'course': 'courseFilter',
            'section': 'sectionFilter',
            'status': 'statusFilter',
            'student': 'studentFilter'
        };
        
        const fieldId = fieldMap[filterKey];
        if (fieldId) {
            document.getElementById(fieldId).value = '';
        }
        
        applyFiltersAndSort();
        showAllFilteredRecords();
        updateActiveFiltersDisplay();
        updateFilterCount();
    }

    function updateFilterCount() {
        const count = Object.values(currentFilters).filter(v => v !== '').length;
        const badge = document.getElementById('filterCount');
        
        if (count > 0) {
            badge.textContent = count;
            badge.classList.remove('hidden');
        } else {
            badge.classList.add('hidden');
        }
    }

    function exportToCSV() {
        const dataToExport = [...filteredRecords];
        
        if (dataToExport.length === 0) {
            alert('No records to export. Please adjust your filters.');
            return;
        }

        const headers = ['Date', 'Course', 'Course Code', 'Student ID', 'Student Name', 'Section', 'Status', 'Time In'];
        
        const csvContent = [
            headers.join(','),
            ...dataToExport.map(record => {
                const date = new Date(record.attendance_date);
                const formattedDate = `="${date.toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: 'short', 
                    day: '2-digit' 
                }).replace(/,/g, '')}"`;
                
                const course = `"${(record.course_name || 'N/A').replace(/"/g, '""')}"`;
                const courseCode = `="${record.course_code || 'N/A'}"`;
                const studentId = `="${record.student_id || 'N/A'}"`;
                const studentName = `"${(record.student_name || 'N/A').replace(/"/g, '""')}"`;
                const section = `"${(record.section_name || 'N/A').replace(/"/g, '""')}"`;
                const status = `"${getStatusDisplayText(record.status).replace(/"/g, '""')}"`;
                const timeIn = `"${(record.time_in || 'N/A').replace(/"/g, '""')}"`;
                
                return [formattedDate, course, courseCode, studentId, studentName, section, status, timeIn].join(',');
            })
        ].join('\n');

        const BOM = '\uFEFF';
        const csvWithBOM = BOM + csvContent;

        const blob = new Blob([csvWithBOM], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        
        if (link.download !== undefined) {
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            
            const currentDate = new Date().toISOString().split('T')[0];
            const activeFiltersCount = Object.values(currentFilters).filter(v => v !== '').length;
            const filterSuffix = activeFiltersCount > 0 ? '_filtered' : '';
            const filename = `faculty_attendance_${currentDate}${filterSuffix}.csv`;
            
            link.setAttribute('download', filename);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            showExportSuccess(dataToExport.length, filename);
        }
    }

    function showExportSuccess(recordCount, filename) {
        const successMsg = document.createElement('div');
        successMsg.className = 'fixed top-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded shadow-lg z-50 max-w-sm';
        successMsg.innerHTML = `
            <div class="flex items-start">
                <i class="fas fa-check-circle mr-2 mt-1"></i>
                <div>
                    <strong>Export Successful!</strong><br>
                    <small>${recordCount} records exported to ${filename}</small><br>
                    <small class="text-green-600 font-medium">💡 Excel will preserve text formatting</small>
                </div>
            </div>
        `;
        
        document.body.appendChild(successMsg);
        
        setTimeout(() => {
            if (successMsg.parentNode) {
                successMsg.parentNode.removeChild(successMsg);
            }
        }, 4000);
    }

    function showError(message) {
        document.getElementById('errorText').textContent = message;
        showElement('errorMessage');
    }

    function showElement(id) {
        const element = document.getElementById(id);
        if (element) {
            element.classList.remove('hidden');
        }
    }

    function hideElement(id) {
        const element = document.getElementById(id);
        if (element) {
            element.classList.add('hidden');
        }
    }

    // Modal event listeners
    document.addEventListener('DOMContentLoaded', function() {
        const filterModal = document.getElementById('filterModal');
        const sortModal = document.getElementById('sortModal');
        
        if (filterModal) {
            filterModal.addEventListener('click', function(e) {
                if (e.target === this) window.closeFilterModal();
            });
        }

        if (sortModal) {
            sortModal.addEventListener('click', function(e) {
                if (e.target === this) window.closeSortModal();
            });
        }
    });
</script>
}