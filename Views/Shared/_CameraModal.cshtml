<!-- Camera Modal -->
<div id="cameraModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 animate-fade-in">
        <!-- Modal Header -->
        <div class="px-6 py-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
                <h3 class="text-lg font-semibold text-gray-800">Capture Your Photo</h3>
                <button id="closeCameraModal" class="text-gray-400 hover:text-gray-600 transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>
        </div>

        <!-- Modal Body -->
        <div class="p-6">
            <!-- Camera View -->
            <div class="relative mb-4">
                <video id="cameraVideo" class="w-full h-64 bg-gray-900 rounded-lg hidden" autoplay playsinline></video>
                <canvas id="cameraCanvas" class="w-full h-64 bg-gray-100 rounded-lg border-2 border-dashed border-gray-300 hidden"></canvas>
                
                <!-- Camera Placeholder -->
                <div id="cameraPlaceholder" class="w-full h-64 bg-gray-100 rounded-lg border-2 border-dashed border-gray-300 flex items-center justify-center">
                    <div class="text-center">
                        <svg class="w-12 h-12 text-gray-400 mx-auto mb-2" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
                        </svg>
                        <p class="text-gray-500 text-sm">Click "Start Camera" to begin</p>
                    </div>
                </div>

                <!-- Face Detection Overlay -->
                <div id="faceOverlay" class="absolute inset-0 pointer-events-none hidden">
                    <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-48 h-60 border-4 border-blue-500 rounded-full opacity-70"></div>
                    <div class="absolute top-2 left-2 bg-blue-500 text-white px-2 py-1 rounded text-xs">
                        Position your face within the circle
                    </div>
                </div>
            </div>

            <!-- Instructions -->
            <div class="mb-4 p-3 bg-blue-50 rounded-lg">
                <h4 class="text-sm font-medium text-blue-800 mb-2">Photo Guidelines:</h4>
                <ul class="text-xs text-blue-700 space-y-1">
                    <li>• Look directly at the camera</li>
                    <li>• Ensure good lighting on your face</li>
                    <li>• Remove glasses if possible</li>
                    <li>• Keep a neutral expression</li>
                </ul>
            </div>

            <!-- Camera Controls -->
            <div class="flex space-x-3">
                <button id="startCamera" class="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium">
                    <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
                    </svg>
                    Start Camera
                </button>
                <button id="capturePhoto" class="flex-1 bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-colors text-sm font-medium hidden">
                    <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
                    </svg>
                    Capture
                </button>
                <button id="retakePhoto" class="flex-1 bg-orange-600 text-white py-2 px-4 rounded-lg hover:bg-orange-700 transition-colors text-sm font-medium hidden">
                    <svg class="w-4 h-4 inline mr-2" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z" clip-rule="evenodd"></path>
                    </svg>
                    Retake
                </button>
            </div>

            <!-- Captured Photo Info -->
            <div id="photoInfo" class="hidden mt-4 p-3 bg-green-50 rounded-lg">
                <div class="flex items-center">
                    <svg class="w-5 h-5 text-green-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                    </svg>
                    <span class="text-green-800 text-sm font-medium">Photo captured successfully!</span>
                </div>
            </div>
        </div>

        <!-- Modal Footer -->
        <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
            <button id="cancelCamera" class="px-4 py-2 text-gray-700 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm">
                Cancel
            </button>
            <button id="confirmPhoto" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium hidden">
                Use This Photo
            </button>
        </div>
    </div>
</div>

<script>
// Camera Modal Functionality
class CameraModal {
    constructor() {
        this.modal = document.getElementById('cameraModal');
        this.video = document.getElementById('cameraVideo');
        this.canvas = document.getElementById('cameraCanvas');
        this.placeholder = document.getElementById('cameraPlaceholder');
        this.faceOverlay = document.getElementById('faceOverlay');
        this.photoInfo = document.getElementById('photoInfo');
        this.stream = null;
        this.capturedPhoto = null;
        this.onPhotoCapture = null;
        
        this.initializeEvents();
    }
    
    initializeEvents() {
        // Modal controls
        document.getElementById('closeCameraModal').addEventListener('click', () => this.close());
        document.getElementById('cancelCamera').addEventListener('click', () => this.close());
        
        // Camera controls
        document.getElementById('startCamera').addEventListener('click', () => this.startCamera());
        document.getElementById('capturePhoto').addEventListener('click', () => this.capturePhoto());
        document.getElementById('retakePhoto').addEventListener('click', () => this.retakePhoto());
        document.getElementById('confirmPhoto').addEventListener('click', () => this.confirmPhoto());
        
        // Close on outside click
        this.modal.addEventListener('click', (e) => {
            if (e.target === this.modal) this.close();
        });
    }
    
    async startCamera() {
        try {
            this.stream = await navigator.mediaDevices.getUserMedia({ 
                video: { 
                    width: { ideal: 640 },
                    height: { ideal: 480 },
                    facingMode: 'user'
                } 
            });
            
            this.video.srcObject = this.stream;
            this.placeholder.classList.add('hidden');
            this.video.classList.remove('hidden');
            this.faceOverlay.classList.remove('hidden');
            
            document.getElementById('startCamera').classList.add('hidden');
            document.getElementById('capturePhoto').classList.remove('hidden');
            
        } catch (error) {
            console.error('Error accessing camera:', error);
            alert('Unable to access camera. Please check permissions.');
        }
    }
    
    capturePhoto() {
        const context = this.canvas.getContext('2d');
        this.canvas.width = this.video.videoWidth;
        this.canvas.height = this.video.videoHeight;
        
        context.drawImage(this.video, 0, 0);
        this.capturedPhoto = this.canvas.toDataURL('image/jpeg', 0.8);
        
        this.video.classList.add('hidden');
        this.canvas.classList.remove('hidden');
        this.faceOverlay.classList.add('hidden');
        this.photoInfo.classList.remove('hidden');
        
        document.getElementById('capturePhoto').classList.add('hidden');
        document.getElementById('retakePhoto').classList.remove('hidden');
        document.getElementById('confirmPhoto').classList.remove('hidden');
    }
    
    retakePhoto() {
        this.video.classList.remove('hidden');
        this.canvas.classList.add('hidden');
        this.faceOverlay.classList.remove('hidden');
        this.photoInfo.classList.add('hidden');
        
        document.getElementById('retakePhoto').classList.add('hidden');
        document.getElementById('confirmPhoto').classList.add('hidden');
        document.getElementById('capturePhoto').classList.remove('hidden');
    }
    
    confirmPhoto() {
        if (this.capturedPhoto && this.onPhotoCapture) {
            this.onPhotoCapture(this.capturedPhoto);
        }
        this.close();
    }
    
    open(onPhotoCapture) {
        this.onPhotoCapture = onPhotoCapture;
        this.modal.classList.remove('hidden');
        this.reset();
    }
    
    close() {
        this.modal.classList.add('hidden');
        this.stopCamera();
        this.reset();
    }
    
    stopCamera() {
        if (this.stream) {
            this.stream.getTracks().forEach(track => track.stop());
            this.stream = null;
        }
    }
    
    reset() {
        this.video.classList.add('hidden');
        this.canvas.classList.add('hidden');
        this.placeholder.classList.remove('hidden');
        this.faceOverlay.classList.add('hidden');
        this.photoInfo.classList.add('hidden');
        
        document.getElementById('startCamera').classList.remove('hidden');
        document.getElementById('capturePhoto').classList.add('hidden');
        document.getElementById('retakePhoto').classList.add('hidden');
        document.getElementById('confirmPhoto').classList.add('hidden');
        
        this.capturedPhoto = null;
    }
}

// Initialize camera modal when page loads
document.addEventListener('DOMContentLoaded', function() {
    window.cameraModal = new CameraModal();
});
</script>
