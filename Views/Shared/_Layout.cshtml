<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Attendify</title>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        /* Dashboard entrance animation */
        .dashboard-entrance {
            animation: dashboardEntrance 0.8s ease-out forwards;
        }
        
        @@keyframes dashboardEntrance {
            0% { 
                opacity: 0;
                transform: scale(0.95);
                filter: blur(2px);
            }
            50% { 
                opacity: 0.7;
                transform: scale(0.98);
                filter: blur(1px);
            }
            100% { 
                opacity: 1;
                transform: scale(1);
                filter: blur(0);
            }
        }
        
        /* Sidebar slide-in animation */
        .sidebar-slide-in {
            animation: sidebarSlideIn 0.6s ease-out forwards;
        }
        
        @@keyframes sidebarSlideIn {
            0% { 
                opacity: 0;
                transform: translateX(-100%);
            }
            100% { 
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        /* Main content fade-in animation */
        .main-content-fade-in {
            animation: mainContentFadeIn 0.8s ease-out 0.3s forwards;
            opacity: 0;
        }
        
        @@keyframes mainContentFadeIn {
            0% { 
                opacity: 0;
                transform: translateY(20px);
            }
            100% { 
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        /* Navbar slide-down animation */
        .navbar-slide-down {
            animation: navbarSlideDown 0.6s ease-out 0.2s forwards;
            opacity: 0;
        }
        
        @@keyframes navbarSlideDown {
            0% { 
                opacity: 0;
                transform: translateY(-20px);
            }
            100% { 
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        /* Staggered animation for dashboard cards */
        .dashboard-card-entrance {
            animation: dashboardCardEntrance 0.6s ease-out forwards;
            opacity: 0;
        }
        
        @@keyframes dashboardCardEntrance {
            0% { 
                opacity: 0;
                transform: translateY(30px) scale(0.9);
            }
            100% { 
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }
        
        /* Apply staggered delays */
        .dashboard-card-entrance:nth-child(1) { animation-delay: 0.5s; }
        .dashboard-card-entrance:nth-child(2) { animation-delay: 0.6s; }
        .dashboard-card-entrance:nth-child(3) { animation-delay: 0.7s; }
        .dashboard-card-entrance:nth-child(4) { animation-delay: 0.8s; }
        
        /* Logout animation */
        .logout-transition {
            animation: logoutTransition 1.0s ease-in forwards;
        }
        
        @@keyframes logoutTransition {
            0% { 
                opacity: 1;
                transform: scale(1);
                filter: blur(0);
            }
            30% { 
                opacity: 0.8;
                transform: scale(0.98);
                filter: blur(1px);
            }
            70% { 
                opacity: 0.4;
                transform: scale(0.95);
                filter: blur(2px);
            }
            100% { 
                opacity: 0;
                transform: scale(0.9);
                filter: blur(3px);
                visibility: hidden;
            }
        }
        
        /* Logout confirmation modal animation */
        .logout-modal-entrance {
            animation: logoutModalEntrance 0.4s cubic-bezier(0.4, 0, 0.2, 1) forwards;
        }
        
        @@keyframes logoutModalEntrance {
            0% { 
                opacity: 0;
                transform: scale(0.9) translateY(-20px);
            }
            100% { 
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }
        
        /* Onboarding modal blur effects - target specific containers */
        .onboarding-modal-open #dashboardSidebar {
            filter: blur(4px);
            opacity: 0.6;
            transition: all 0.3s ease-out;
            pointer-events: none;
        }
        
        .onboarding-modal-open #dashboardNavbar {
            filter: blur(4px);
            opacity: 0.6;
            transition: all 0.3s ease-out;
            pointer-events: none;
        }
        
        .onboarding-modal-open #dashboardMain {
            filter: blur(4px);
            opacity: 0.6;
            transition: all 0.3s ease-out;
            pointer-events: none;
        }
        
        /* Ensure modals are always on top and never blurred */
        #onboardingModal {
            z-index: 9999 !important;
            filter: none !important;
            backdrop-filter: blur(8px) !important;
        }
        
        #courseStudentsModal {
            z-index: 9998 !important;
            filter: none !important;
            backdrop-filter: blur(8px) !important;
            pointer-events: auto !important;
        }

        #filterModal, #sortModal {
            z-index: 10050 !important;
            filter: none !important;
            backdrop-filter: blur(8px) !important;
            pointer-events: auto !important;
        }
        
        /* Layout z-index management */
        .dashboard-sidebar {
            z-index: 10;
        }
        
        .dashboard-navbar {
            z-index: 20;
        }
        
        .dashboard-main {
            z-index: 5;
        }
        
        /* Mobile sidebar z-index when modal is open */
        .modal-open #mobile-sidebar-overlay {
            z-index: 1 !important;
            pointer-events: none;
        }

        /* Centralized modal z-index management */
        .page-modal {
            z-index: 10050 !important;
        }
        
        .modal-blur-background #dashboardSidebar,
        .modal-blur-background #dashboardNavbar,
        .modal-blur-background #dashboardMain,
        .modal-blur-background #mobile-sidebar-overlay {
            filter: blur(2px) !important;
            opacity: 0.4 !important;
            pointer-events: none !important;
            transition: all 0.3s ease-out;
        }
        
        /* Ensure modal content is never blurred */
        .page-modal {
            filter: none !important;
            pointer-events: auto !important;
        }
    </style>
</head>
<body data-has-attendance-rate="@(ViewBag.HasAttendanceRate?.ToString().ToLower() ?? "false")">
    <!-- Onboarding Modal - OUTSIDE dashboard container to avoid blur effects -->
    @await Html.PartialAsync("_OnboardingModal")
    
    <!-- Course Students Modal - OUTSIDE dashboard container to avoid blur effects -->
    @await Html.PartialAsync("_CourseStudentsModal")
    
    <!-- Course Details Modal - OUTSIDE dashboard container to avoid blur effects -->
    @await Html.PartialAsync("_CourseDetailsModal")
    
    <!-- Filter Modal - OUTSIDE dashboard container to avoid blur effects -->
    @await Html.PartialAsync("_FilterModal")
    
    <!-- Sort Modal - OUTSIDE dashboard container to avoid blur effects -->
    @await Html.PartialAsync("_SortModal")
    
    <div id="dashboardContainer" class="flex h-screen dashboard-entrance">
        <!-- Sidebar - Hidden on mobile by default -->
        <div id="dashboardSidebar" class="w-64 bg-white shadow-lg flex-shrink-0 sidebar-slide-in dashboard-sidebar hidden lg:block">
            <div class="p-6">
                <!-- Logo and Title -->
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center">
                        <i class="fas fa-calendar-check text-white text-lg"></i>
                    </div>
                    <div>
                        <h1 class="text-xl font-bold text-gray-800">Attendify</h1>
                        <p class="text-sm text-gray-500">Attendance App</p>
                    </div>
                </div>
            </div>
            
            <!-- Navigation Menu -->
            <nav class="mt-6">
                <div class="px-6 pb-4">
                    <h3 class="text-xs font-semibold text-gray-500 uppercase tracking-wider">Menu</h3>
                </div>
                
                @{
                    var currentController = ViewContext.RouteData.Values["controller"]?.ToString();
                    var currentAction = ViewContext.RouteData.Values["action"]?.ToString();
                    var userRole = Context.Session.GetString("UserRole")?.ToLower() ?? "student";
                    var isStudent = userRole == "student";
                    var isFaculty = userRole == "faculty" || userRole == "teacher" || userRole == "instructor";
                    
                    // Student variables
                    var isStudentDashboard = currentController == "Student" && currentAction == "Dashboard";
                    var isStudentCourses = currentController == "Student" && currentAction == "Courses";
                    var isStudentAttendanceHistory = currentController == "Student" && currentAction == "AttendanceHistory";
                    
                    // Faculty variables
                    var isFacultyDashboard = currentController == "Faculty" && currentAction == "Dashboard";
                    var isFacultyClasses = currentController == "Faculty" && currentAction == "Classes";
                    var isFacultyAttendance = currentController == "Faculty" && currentAction == "Attendance";
                    var isFacultyReports = currentController == "Faculty" && currentAction == "Reports";
                }
                
                @if (isStudent)
                {
                    <!-- Student Navigation Links -->
                    <a href="/Student/Dashboard" class="flex items-center px-6 py-3 @(isStudentDashboard ? "text-gray-700 bg-blue-50 border-r-4 border-blue-600" : "text-gray-600 hover:bg-gray-50 hover:text-gray-900") transition-colors duration-200">
                        <i class="fas fa-home w-5 h-5 mr-3"></i>
                        <span class="@(isStudentDashboard ? "font-medium" : "")">Dashboard</span>
                    </a>
                    
                    <a href="/Student/Courses" class="flex items-center px-6 py-3 @(isStudentCourses ? "text-gray-700 bg-blue-50 border-r-4 border-blue-600" : "text-gray-600 hover:bg-gray-50 hover:text-gray-900") transition-colors duration-200">
                        <i class="fas fa-book-open w-5 h-5 mr-3"></i>
                        <span class="@(isStudentCourses ? "font-medium" : "")">Courses</span>
                    </a>
                    
                    <a href="/Student/AttendanceHistory" class="flex items-center px-6 py-3 @(isStudentAttendanceHistory ? "text-gray-700 bg-blue-50 border-r-4 border-blue-600" : "text-gray-600 hover:bg-gray-50 hover:text-gray-900") transition-colors duration-200">
                        <i class="fas fa-clipboard-list w-5 h-5 mr-3"></i>
                        <span class="@(isStudentAttendanceHistory ? "font-medium" : "")">Attendance History</span>
                    </a>
                }
                else if (isFaculty)
                {
                    <!-- Faculty Navigation Links -->
                    <a href="/Faculty/Dashboard" class="flex items-center px-6 py-3 @(isFacultyDashboard ? "text-gray-700 bg-blue-50 border-r-4 border-blue-600" : "text-gray-600 hover:bg-gray-50 hover:text-gray-900") transition-colors duration-200">
                        <i class="fas fa-home w-5 h-5 mr-3"></i>
                        <span class="@(isFacultyDashboard ? "font-medium" : "")">Dashboard</span>
                    </a>
                    
                    <a href="/Faculty/Classes" class="flex items-center px-6 py-3 @(isFacultyClasses ? "text-gray-700 bg-blue-50 border-r-4 border-blue-600" : "text-gray-600 hover:bg-gray-50 hover:text-gray-900") transition-colors duration-200">
                        <i class="fas fa-chalkboard-teacher w-5 h-5 mr-3"></i>
                        <span class="@(isFacultyClasses ? "font-medium" : "")">Manage Courses</span>
                    </a>
                    
                    <a href="/Faculty/Attendance" class="flex items-center px-6 py-3 @(isFacultyAttendance ? "text-gray-700 bg-blue-50 border-r-4 border-blue-600" : "text-gray-600 hover:bg-gray-50 hover:text-gray-900") transition-colors duration-200">
                         <i class="fas fa-clipboard-list w-5 h-5 mr-3"></i>
                        <span class="@(isFacultyAttendance ? "font-medium" : "")">Attendance History</span>
                    </a>
                    
                }
                
                <div class="border-t border-gray-200 mt-6 pt-6">
                    <button type="button" onclick="showLayoutLogoutConfirmation()" class="flex items-center w-full px-6 py-3 text-gray-600 hover:bg-red-50 hover:text-red-700 transition-colors duration-200">
                        <i class="fas fa-sign-out-alt w-5 h-5 mr-3"></i>
                        <span>Logout</span>
                    </button>
                </div>
            </nav>
        </div>
        
        <!-- Main Content Area -->
        <div class="flex-1 flex flex-col overflow-hidden">
            <!-- Top Navbar -->
            <header id="dashboardNavbar" class="bg-white shadow-sm border-b border-gray-200 navbar-slide-down dashboard-navbar">
                <div class="flex items-center justify-between px-6 py-4">
                    <div class="flex items-center">
                        <button class="text-gray-500 hover:text-gray-700 lg:hidden" id="mobile-menu-button">
                            <i class="fas fa-bars w-6 h-6"></i>
                        </button>
                        <span class="ml-3 text-lg font-semibold text-gray-700">
                            @(isFaculty ? "Faculty Portal" : "Student Portal")
                        </span>
                    </div>
                    
                    <div class="flex items-center space-x-4">
                        <!-- Current Date and Time -->
                        <div class="text-right">
                            <div class="text-sm font-medium text-gray-900" id="current-date"></div>
                            <div class="text-xs text-gray-500" id="current-time"></div>
                        </div>
                    </div>
                </div>
            </header>
            
            <!-- Main Content -->
            <main id="dashboardMain" class="flex-1 overflow-x-hidden overflow-y-auto bg-gray-50 main-content-fade-in dashboard-main">
                <div class="container mx-auto px-6 py-8">
                    @RenderBody()
                </div>
            </main>
        </div>
    </div>

    <!-- Mobile Sidebar Overlay -->
    <div class="fixed inset-0 z-50 lg:hidden hidden" id="mobile-sidebar-overlay">
        <div class="fixed inset-0 bg-black opacity-50" onclick="closeMobileSidebar()"></div>
        <div class="fixed left-0 top-0 bottom-0 w-64 bg-white shadow-lg transform -translate-x-full transition-transform duration-300" id="mobile-sidebar">
            <!-- Mobile sidebar content (same as desktop sidebar) -->
            <div class="p-6">
                <div class="flex items-center justify-between">
                    <div class="flex items-center space-x-3">
                        <div class="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center">
                            <i class="fas fa-calendar-check text-white text-lg"></i>
                        </div>
                        <div>
                            <h1 class="text-xl font-bold text-gray-800">Attendify</h1>
                            <p class="text-sm text-gray-500">Attendance App</p>
                        </div>
                    </div>
                    <button class="text-gray-500 hover:text-gray-700" id="close-mobile-menu">
                        <i class="fas fa-times w-6 h-6"></i>
                    </button>
                </div>
            </div>
            
            <nav class="mt-6">
                <div class="px-6 pb-4">
                    <h3 class="text-xs font-semibold text-gray-500 uppercase tracking-wider">Menu</h3>
                </div>
                
                @if (isStudent)
                {
                    <!-- Student Mobile Navigation Links -->
                    <a href="/Student/Dashboard" class="flex items-center px-6 py-3 @(isStudentDashboard ? "text-gray-700 bg-blue-50 border-r-4 border-blue-600" : "text-gray-600 hover:bg-gray-50 hover:text-gray-900") transition-colors duration-200">
                        <i class="fas fa-home w-5 h-5 mr-3"></i>
                        <span class="@(isStudentDashboard ? "font-medium" : "")">Dashboard</span>
                    </a>
                    
                    <a href="/Student/Courses" class="flex items-center px-6 py-3 @(isStudentCourses ? "text-gray-700 bg-blue-50 border-r-4 border-blue-600" : "text-gray-600 hover:bg-gray-50 hover:text-gray-900") transition-colors duration-200">
                        <i class="fas fa-book-open w-5 h-5 mr-3"></i>
                        <span class="@(isStudentCourses ? "font-medium" : "")">Courses</span>
                    </a>
                    
                    <a href="/Student/AttendanceHistory" class="flex items-center px-6 py-3 @(isStudentAttendanceHistory ? "text-gray-700 bg-blue-50 border-r-4 border-blue-600" : "text-gray-600 hover:bg-gray-50 hover:text-gray-900") transition-colors duration-200">
                        <i class="fas fa-clipboard-list w-5 h-5 mr-3"></i>
                        <span class="@(isStudentAttendanceHistory ? "font-medium" : "")">Attendance History</span>
                    </a>
                }
                else if (isFaculty)
                {
                    <!-- Faculty Mobile Navigation Links -->
                    <a href="/Faculty/Dashboard" class="flex items-center px-6 py-3 @(isFacultyDashboard ? "text-gray-700 bg-blue-50 border-r-4 border-blue-600" : "text-gray-600 hover:bg-gray-50 hover:text-gray-900") transition-colors duration-200">
                        <i class="fas fa-home w-5 h-5 mr-3"></i>
                        <span class="@(isFacultyDashboard ? "font-medium" : "")">Dashboard</span>
                    </a>
                    
                    <a href="/Faculty/Classes" class="flex items-center px-6 py-3 @(isFacultyClasses ? "text-gray-700 bg-blue-50 border-r-4 border-blue-600" : "text-gray-600 hover:bg-gray-50 hover:text-gray-900") transition-colors duration-200">
                        <i class="fas fa-chalkboard-teacher w-5 h-5 mr-3"></i>
                        <span class="@(isFacultyClasses ? "font-medium" : "")">Manage Classes</span>
                    </a>
                    
                    <a href="/Faculty/Attendance" class="flex items-center px-6 py-3 @(isFacultyAttendance ? "text-gray-700 bg-blue-50 border-r-4 border-blue-600" : "text-gray-600 hover:bg-gray-50 hover:text-gray-900") transition-colors duration-200">
                        <i class="fas fa-user-check w-5 h-5 mr-3"></i>
                        <span class="@(isFacultyAttendance ? "font-medium" : "")">Record Attendance</span>
                    </a>
                    
                    <a href="/Faculty/Reports" class="flex items-center px-6 py-3 @(isFacultyReports ? "text-gray-700 bg-blue-50 border-r-4 border-blue-600" : "text-gray-600 hover:bg-gray-50 hover:text-gray-900") transition-colors duration-200">
                        <i class="fas fa-chart-bar w-5 h-5 mr-3"></i>
                        <span class="@(isFacultyReports ? "font-medium" : "")">Reports & Analytics</span>
                    </a>
                }
                
                <div class="border-t border-gray-200 mt-6 pt-6">
                    <button type="button" onclick="showLayoutLogoutConfirmation()" class="flex items-center w-full px-6 py-3 text-gray-600 hover:bg-red-50 hover:text-red-700 transition-colors duration-200">
                        <i class="fas fa-sign-out-alt w-5 h-5 mr-3"></i>
                        <span>Logout</span>
                    </button>
                </div>
            </nav>
        </div>
    </div>

    <!-- Layout Logout Confirmation Modal -->
    <div id="layoutLogoutConfirmationModal" class="fixed inset-0 bg-gray-900 bg-opacity-75 overflow-y-auto h-full w-full z-[10002] hidden flex items-center justify-center backdrop-blur-sm">
        <div id="layoutLogoutModalContent" class="relative mx-auto p-6 border w-full max-w-md shadow-2xl rounded-xl bg-white transform transition-all duration-300 scale-95 opacity-0 m-4">
            
            <!-- Modal Header -->
            <div class="text-center mb-5">
                <div class="mx-auto w-16 h-16 bg-gradient-to-br from-red-500 to-red-700 rounded-full flex items-center justify-center mb-4">
                    <i class="fas fa-sign-out-alt text-white text-2xl"></i>
                </div>
                <h3 class="text-xl font-bold text-gray-800 mb-2">Confirm Logout</h3>
                <p class="text-gray-600 text-sm">
                    Are you sure you want to log out of your account? You'll need to log in again to access your dashboard.
                </p>
            </div>

            <!-- Modal Buttons -->
            <div class="flex justify-center space-x-3">
                <button type="button" onclick="hideLayoutLogoutConfirmation()" 
                        class="bg-gray-600 text-white py-2 px-4 rounded text-sm hover:bg-gray-700 transition-colors font-semibold flex items-center">
                    <i class="fas fa-arrow-left mr-2"></i>Stay Logged In
                </button>
                <button type="button" onclick="confirmLayoutLogout()" id="layoutLogoutConfirmButton"
                        class="bg-red-600 text-white py-2 px-4 rounded text-sm hover:bg-red-700 transition-colors font-semibold flex items-center">
                    <!-- Loading spinner - initially hidden -->
                    <svg id="layoutLogoutSpinner" class="hidden w-4 h-4 text-white mr-2 animate-spin" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    <span id="layoutLogoutButtonText">
                        <i class="fas fa-sign-out-alt mr-2"></i>Yes, Logout
                    </span>
                </button>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script>
        // Centralized Modal Management System
        window.ModalManager = {
            openModals: new Set(),
            
            openModal: function(modalId, options = {}) {
                const modal = document.getElementById(modalId);
                const modalContent = modal?.querySelector('[id$="ModalContent"], .modal-content');
                
                if (!modal) {
                    console.error(`Modal with id '${modalId}' not found`);
                    return false;
                }
                
                console.log(`Opening modal: ${modalId}`);
                
                // Add to open modals set
                this.openModals.add(modalId);
                
                // Apply background blur and disable interactions
                document.body.classList.add('modal-blur-background');
                
                // Show modal
                modal.classList.remove('hidden');
                modal.classList.add('page-modal');
                
                // Apply entrance animation if content element exists
                if (modalContent) {
                    setTimeout(() => {
                        modalContent.classList.remove('scale-95', 'opacity-0');
                        modalContent.classList.add('scale-100', 'opacity-100', 'filter-modal-entrance');
                    }, 50);
                }
                
                // Prevent background scrolling
                document.body.style.overflow = 'hidden';
                
                return true;
            },
            
            closeModal: function(modalId) {
                const modal = document.getElementById(modalId);
                const modalContent = modal?.querySelector('[id$="ModalContent"], .modal-content');
                
                if (!modal) {
                    console.error(`Modal with id '${modalId}' not found`);
                    return false;
                }
                
                console.log(`Closing modal: ${modalId}`);
                
                // Remove from open modals set
                this.openModals.delete(modalId);
                
                // Apply exit animation if content element exists
                if (modalContent) {
                    modalContent.classList.remove('scale-100', 'opacity-100');
                    modalContent.classList.add('scale-95', 'opacity-0');
                }
                
                // Hide modal after animation
                setTimeout(() => {
                    modal.classList.add('hidden');
                    modal.classList.remove('page-modal');
                    
                    // Remove background effects if no other modals are open
                    if (this.openModals.size === 0) {
                        document.body.classList.remove('modal-blur-background');
                        document.body.style.overflow = '';
                        console.log('All modals closed, removing blur effects');
                    }
                }, 300);
                
                return true;
            },
            
            closeAllModals: function() {
                this.openModals.forEach(modalId => {
                    this.closeModal(modalId);
                });
            },
            
            isModalOpen: function(modalId) {
                return this.openModals.has(modalId);
            },
            
            hasOpenModals: function() {
                return this.openModals.size > 0;
            }
        };
        
        // Global modal functions for backward compatibility and convenience
        window.openFilterModal = function() {
            console.log('Global openFilterModal called');
            return ModalManager.openModal('filterModal');
        };
        
        window.closeFilterModal = function() {
            console.log('Global closeFilterModal called');
            return ModalManager.closeModal('filterModal');
        };
        
        window.openSortModal = function() {
            console.log('Global openSortModal called');
            return ModalManager.openModal('sortModal');
        };
        
        window.closeSortModal = function() {
            console.log('Global closeSortModal called');
            return ModalManager.closeModal('sortModal');
        };
        
        // Enhanced mobile menu functionality
        function openMobileSidebar() {
            const overlay = document.getElementById('mobile-sidebar-overlay');
            const sidebar = document.getElementById('mobile-sidebar');
            
            overlay.classList.remove('hidden');
            document.body.style.overflow = 'hidden'; // Prevent background scrolling
            
            setTimeout(() => {
                sidebar.classList.remove('-translate-x-full');
            }, 10);
        }

        function closeMobileSidebar() {
            const overlay = document.getElementById('mobile-sidebar-overlay');
            const sidebar = document.getElementById('mobile-sidebar');
            
            sidebar.classList.add('-translate-x-full');
            document.body.style.overflow = ''; // Restore scrolling
            
            setTimeout(() => {
                overlay.classList.add('hidden');
            }, 300);
        }

        // Mobile menu functionality
        document.getElementById('mobile-menu-button').addEventListener('click', function() {
            openMobileSidebar();
        });

        document.getElementById('close-mobile-menu').addEventListener('click', function() {
            closeMobileSidebar();
        });

        // Close mobile menu when clicking overlay
        document.getElementById('mobile-sidebar-overlay').addEventListener('click', function(e) {
            if (e.target === this || e.target.classList.contains('opacity-50')) {
                closeMobileSidebar();
            }
        });

        // Close mobile sidebar on window resize if open
        window.addEventListener('resize', function() {
            if (window.innerWidth >= 1024) { // lg breakpoint
                const overlay = document.getElementById('mobile-sidebar-overlay');
                if (!overlay.classList.contains('hidden')) {
                    closeMobileSidebar();
                }
            }
        });

        // Handle escape key to close modals and mobile sidebar
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                // Close page modals first
                if (ModalManager.hasOpenModals()) {
                    ModalManager.closeAllModals();
                    return;
                }
                
                // Then handle mobile sidebar
                const overlay = document.getElementById('mobile-sidebar-overlay');
                if (!overlay.classList.contains('hidden')) {
                    closeMobileSidebar();
                }
            }
        });

        // Update date and time
        function updateDateTime() {
            const now = new Date();
            const options = { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric',
                weekday: 'long'
            };
            const timeOptions = {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: true
            };
            
            document.getElementById('current-date').textContent = now.toLocaleDateString('en-US', options);
            document.getElementById('current-time').textContent = now.toLocaleTimeString('en-US', timeOptions);
        }

        // Update time every second
        setInterval(updateDateTime, 1000);
        updateDateTime(); // Initial call

        // Initialize dashboard animations on page load
        document.addEventListener('DOMContentLoaded', function() {
            // Add entrance animations to dashboard cards
            const dashboardCards = document.querySelectorAll('.bg-white.rounded-lg, .grid > div');
            dashboardCards.forEach((card, index) => {
                if (!card.classList.contains('dashboard-card-entrance')) {
                    card.classList.add('dashboard-card-entrance');
                    card.style.animationDelay = `${0.5 + (index * 0.1)}s`;
                }
            });
            
            // Smooth scroll behavior for better UX
            document.documentElement.style.scrollBehavior = 'smooth';
            
            // Welcome animation for user name
            const welcomeText = document.querySelector('h1');
            if (welcomeText && welcomeText.textContent.includes('Welcome back')) {
                welcomeText.style.animation = 'dashboardCardEntrance 0.8s ease-out 0.9s forwards';
                welcomeText.style.opacity = '0';
            }
            
            console.log('Dashboard animations initialized');
        });
        
        // Layout logout functions
        function showLayoutLogoutConfirmation() {
            const modal = document.getElementById('layoutLogoutConfirmationModal');
            const modalContent = document.getElementById('layoutLogoutModalContent');
            
            if (!modal || !modalContent) {
                // Fallback to direct logout if modal not found
                performLayoutLogout();
                return;
            }
            
            // Reset modal state before showing
            resetLayoutLogoutModal();
            
            // Show modal
            modal.classList.remove('hidden');
            
            // Start entrance animation
            setTimeout(() => {
                modalContent.classList.remove('scale-95', 'opacity-0');
                modalContent.classList.add('scale-100', 'opacity-100');
            }, 50);
        }
        
        function hideLayoutLogoutConfirmation() {
            const modal = document.getElementById('layoutLogoutConfirmationModal');
            const modalContent = document.getElementById('layoutLogoutModalContent');
            
            if (!modal || !modalContent) return;
            
            // Add exit animation
            modalContent.classList.remove('scale-100', 'opacity-100');
            modalContent.classList.add('scale-95', 'opacity-0');
            
            // Hide modal after animation
            setTimeout(() => {
                modal.classList.add('hidden');
                
                // Reset button states when modal is hidden
                resetLayoutLogoutModal();
            }, 300);
        }
        
        function confirmLayoutLogout() {
            // Get button elements
            const confirmButton = document.getElementById('layoutLogoutConfirmButton');
            const buttonText = document.getElementById('layoutLogoutButtonText');
            const spinner = document.getElementById('layoutLogoutSpinner');
            const cancelButton = document.querySelector('#layoutLogoutConfirmationModal button:first-child');
            
            // Disable buttons to prevent double-clicks
            confirmButton.disabled = true;
            cancelButton.disabled = true;
            confirmButton.style.opacity = '0.8';
            cancelButton.style.opacity = '0.6';
            confirmButton.style.cursor = 'not-allowed';
            cancelButton.style.cursor = 'not-allowed';
            
            // Show spinner and update text
            spinner.classList.remove('hidden');
            buttonText.innerHTML = 'Logging out...';
            
            // Hide the confirmation modal first
            hideLayoutLogoutConfirmation();
            
            // Start logout animation and process
            setTimeout(() => {
                performLayoutLogout();
            }, 300);
        }
        
        function performLayoutLogout() {
            const dashboardContainer = document.getElementById('dashboardContainer');
            
            // Start logout animation
            if (dashboardContainer) {
                dashboardContainer.classList.add('logout-transition');
            }
            
            // Perform actual logout
            setTimeout(() => {
                fetch('/Auth/Logout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getLayoutAntiForgeryToken()
                    }
                }).then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.href = data.redirect_url || '/Auth/Login?logout=true';
                    } else {
                        // Fallback redirect
                        window.location.href = '/Auth/Login?logout=true';
                    }
                }).catch(() => {
                    // Fallback - just redirect
                    window.location.href = '/Auth/Login?logout=true';
                });
            }, 500);
        }
        
        function getLayoutAntiForgeryToken() {
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenInput ? tokenInput.value : '';
        }
        
        // Remove old logout functions and replace with layout logout functions
        function confirmLogout() {
            showLayoutLogoutConfirmation();
        }
        
        function closeLogoutModal() {
            hideLayoutLogoutConfirmation();
        }
        
        function resetLayoutLogoutModal() {
            const confirmButton = document.getElementById('layoutLogoutConfirmButton');
            const buttonText = document.getElementById('layoutLogoutButtonText');
            const spinner = document.getElementById('layoutLogoutSpinner');
            const cancelButton = document.querySelector('#layoutLogoutConfirmationModal button:first-child');
            
            // Reset button states
            if (confirmButton) {
                confirmButton.disabled = false;
                confirmButton.style.opacity = '';
                confirmButton.style.cursor = '';
            }
            
            if (cancelButton) {
                cancelButton.disabled = false;
                cancelButton.style.opacity = '';
                cancelButton.style.cursor = '';
            }
            
            // Hide spinner and reset text
            if (spinner) {
                spinner.classList.add('hidden');
            }
            
            if (buttonText) {
                buttonText.innerHTML = '<i class="fas fa-sign-out-alt mr-2"></i>Yes, Logout';
            }
        }
        
        // Add backdrop click handler for layout logout modal
        document.addEventListener('DOMContentLoaded', function() {
            // ...existing code...
            
            // Add backdrop click handler for logout modal
            const layoutLogoutModal = document.getElementById('layoutLogoutConfirmationModal');
            if (layoutLogoutModal) {
                layoutLogoutModal.addEventListener('click', function(e) {
                    if (e.target === this) {
                        hideLayoutLogoutConfirmation();
                    }
                });
            }
            
            console.log('Layout logout modal setup complete');
        });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
    @await Html.PartialAsync("_CameraModal")
    @await Html.PartialAsync("_MarkAttendanceModal")
</body>
</html>
