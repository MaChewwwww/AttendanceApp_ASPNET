<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - AttendanceApp</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    animation: {
                        'slide-in-left': 'slideInLeft 0.6s ease-out',
                        'slide-in-right': 'slideInRight 0.6s ease-out',
                        'slide-out-left': 'slideOutLeft 0.6s ease-in',
                        'slide-out-right': 'slideOutRight 0.6s ease-in',
                        'fade-in': 'fadeIn 0.5s ease-in-out',
                        'slide-down': 'slideDown 0.3s ease-out',
                    }
                }
            }
        }
    </script>
    <style type="text/css">
        @@keyframes slideInLeft {
            from { transform: translateX(-100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
        @@keyframes slideInRight {
            from { 
                opacity: 0; 
                transform: translateX(100%); 
            }
            to { 
                opacity: 1; 
                transform: translateX(0); 
            }
        }
        @@keyframes slideOutLeft {
            from { transform: translateX(0); opacity: 1; }
            to { transform: translateX(-100%); opacity: 0; }
        }
        @@keyframes slideOutRight {
            from { 
                opacity: 1; 
                transform: translateX(0); 
            }
            to { 
                opacity: 0; 
                transform: translateX(100%); 
            }
        }
        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @@keyframes slideDown {
            from { opacity: 0; transform: translateY(-5px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .auth-slider {
            transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
        }
        .content-container {
            width: 50%;
            overflow: hidden;
            position: relative;
        }
        
        /* Enhanced slide animations */
        .slide-content-enter {
            animation: slideContentEnter 0.5s ease-out forwards;
        }
        
        .slide-content-exit {
            animation: slideContentExit 0.5s ease-in forwards;
        }
        
        @@keyframes slideContentEnter {
            from { 
                opacity: 0; 
                transform: translateX(30px); 
            }
            to { 
                opacity: 1; 
                transform: translateX(0); 
            }
        }
        
        @@keyframes slideContentExit {
            from { 
                opacity: 1; 
                transform: translateX(0); 
            }
            to { 
                opacity: 0; 
                transform: translateX(-30px); 
            }
        }
        
        /* Page transition animations for layout switching */
        .page-exit-animation {
            animation: pageExitAnimation 0.6s ease-in-out forwards;
        }
        
        @@keyframes pageExitAnimation {
            0% { 
                opacity: 1;
                transform: scale(1);
            }
            50% { 
                opacity: 0.3;
                transform: scale(0.98);
            }
            100% { 
                opacity: 0;
                transform: scale(0.95);
                visibility: hidden;
            }
        }
        
        /* Success animation for smooth transition to dashboard */
        .login-success-transition {
            animation: loginSuccessTransition 1.2s ease-in-out forwards;
        }
        
        @@keyframes loginSuccessTransition {
            0% { 
                opacity: 1;
                transform: scale(1);
            }
            30% { 
                opacity: 1;
                transform: scale(1.02);
                filter: brightness(1.1);
            }
            70% { 
                opacity: 0.6;
                transform: scale(0.98);
                filter: brightness(0.9);
            }
            100% { 
                opacity: 0;
                transform: scale(0.95);
                filter: brightness(0.8);
            }
        }
        
        /* Enhanced modal success state */
        .modal-success-glow {
            animation: modalSuccessGlow 1s ease-in-out;
            box-shadow: 0 0 20px rgba(34, 197, 94, 0.4);
        }
        
        @@keyframes modalSuccessGlow {
            0%, 100% { 
                box-shadow: 0 0 20px rgba(34, 197, 94, 0.4);
            }
            50% { 
                box-shadow: 0 0 30px rgba(34, 197, 94, 0.6);
            }
        }
        
        /* Smooth processing states */
        .processing-glow {
            animation: processingGlow 1.5s ease-in-out infinite;
            box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.4);
        }
        
        @@keyframes processingGlow {
            0%, 100% { 
                box-shadow: 0 0 5px rgba(59, 130, 246, 0.3);
                transform: scale(1);
            }
            50% { 
                box-shadow: 0 0 20px rgba(59, 130, 246, 0.6);
                transform: scale(1.02);
            }
        }
        
        /* Enhanced modal entrance animations */
        .modal-content-bounce {
            animation: modalContentBounce 0.6s cubic-bezier(0.34, 1.56, 0.64, 1);
        }
        
        @@keyframes modalContentBounce {
            0% { 
                opacity: 0;
                transform: scale(0.3) translateY(50px);
            }
            50% { 
                opacity: 0.8;
                transform: scale(1.05) translateY(-10px);
            }
            100% { 
                opacity: 1;
                transform: scale(1) translateY(0);
            }
        }
        
        /* Staggered input entrance animation */
        .otp-input-entrance {
            animation: otpInputEntrance 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;
        }
        
        @@keyframes otpInputEntrance {
            0% { 
                opacity: 0;
                transform: translateY(30px) scale(0.9);
            }
            70% { 
                opacity: 0.8;
                transform: translateY(-5px) scale(1.02);
            }
            100% { 
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }
        
        /* Enhanced success message animation */
        .success-message-glow {
            animation: successMessageGlow 2s ease-in-out;
        }
        
        @@keyframes successMessageGlow {
            0%, 100% { 
                box-shadow: 0 2px 8px rgba(34, 197, 94, 0.1);
            }
            50% { 
                box-shadow: 0 8px 25px rgba(34, 197, 94, 0.3);
            }
        }
        
        /* Smooth button state transitions */
        .button-state-transition {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        /* Enhanced focus animations for OTP inputs */
        .otp-input-focus-enhanced {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .otp-input-focus-enhanced:focus {
            transform: scale(1.08);
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.2), 0 4px 12px rgba(59, 130, 246, 0.15);
            border-color: #3b82f6;
        }
        
        /* Strikethrough animation for OTP resend buttons */
        .strikethrough-animate {
            position: relative;
            text-decoration: none !important;
            transition: color 0.3s ease-out;
        }

        .strikethrough-animate::after {
            content: '';
            position: absolute;
            left: 0;
            top: 50%;
            width: 0;
            height: 1px;
            background-color: currentColor;
            transition: width 0.3s ease-out;
        }

        .strikethrough-animate.active::after {
            width: 100%;
        }

        .strikethrough-animate.active {
            color: #9ca3af !important;
            cursor: not-allowed !important;
        }

        .strikethrough-animate.active:hover {
            color: #9ca3af !important;
        }
        
        /* Resend button disabled state */
        button:disabled.strikethrough-animate {
            opacity: 0.6;
            pointer-events: none;
        }
        
        /* Auth layout entrance animation (from logout) */
        .auth-entrance-from-logout {
            animation: authEntranceFromLogout 0.8s ease-out forwards;
        }
        
        @@keyframes authEntranceFromLogout {
            0% { 
                opacity: 0;
                transform: scale(1.1);
                filter: blur(3px);
            }
            50% { 
                opacity: 0.6;
                transform: scale(1.02);
                filter: blur(1px);
            }
            100% { 
                opacity: 1;
                transform: scale(1);
                filter: blur(0);
            }
        }
        
        /* Welcome back message animation */
        .welcome-back-message {
            animation: welcomeBackMessage 0.6s ease-out 0.4s forwards;
            opacity: 0;
        }
        
        @@keyframes welcomeBackMessage {
            0% { 
                opacity: 0;
                transform: translateY(20px);
            }
            100% { 
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen overflow-hidden">
    <div id="authLayoutContainer"
         class="flex items-center justify-center min-h-screen p-4"
         style="background: linear-gradient(to bottom right, rgba(239,246,255,0.7), rgba(199,210,254,0.7)), url('/images/Wallpaper.jpg') center center / cover no-repeat; background-blend-mode: darken;">
        <div class="w-full max-w-6xl h-[700px] bg-white rounded-2xl shadow-2xl overflow-hidden relative">
            
            <!-- Navigation Tabs -->
            <div class="absolute top-0 left-0 right-0 z-30 bg-white border-b border-gray-200">
                <div class="flex">
                    <button id="loginTab" class="flex-1 py-4 px-6 text-center font-semibold transition-all duration-300 border-b-2 hover:bg-gray-50">
                        <span class="text-gray-600">Login</span>
                    </button>
                    <button id="registerTab" class="flex-1 py-4 px-6 text-center font-semibold transition-all duration-300 border-b-2 hover:bg-gray-50">
                        <span class="text-gray-600">Register</span>
                    </button>
                </div>
            </div>

            <!-- Content Container -->
            <div class="relative h-full pt-16">
                
                <!-- Sliding Panel with Logo/Wallpaper -->
                <div id="slidingPanel" class="absolute inset-0 auth-slider transform z-20 content-container">
                    <video 
                        id="yourVideoId"
                        src="/video/Attendify_Logo_Image.mp4" 
                        autoplay 
                        muted 
                        loop 
                        playsinline 
                        class="w-full h-full object-cover rounded-l-2xl"
                        style="background: #222;">
                        Your browser does not support the video tag.
                    </video>
                </div>

                <!-- Main Content Area -->
                <div class="flex h-full relative">
                    <!-- Login Section -->
                    <div id="loginSection" class="content-container absolute left-0 top-0 h-full" style="transform: translateX(-100%); opacity: 0;">
                        <div class="h-full flex items-center justify-center p-8 bg-white overflow-y-auto">
                            <div class="w-full max-w-md" id="loginContent">
                                <!-- Login content will be loaded here dynamically -->
                                <div id="loginLoader" class="text-center">
                                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
                                    <p class="text-gray-600">Loading...</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Register Section -->
                    <div id="registerSection" class="content-container absolute right-0 top-0 h-full bg-white" style="transform: translateX(100%); opacity: 0;">
                        <div class="h-full overflow-y-auto">
                            @RenderBody()
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- OTP Verification Modal - TOP LEVEL OUTSIDE ALL DYNAMIC CONTENT -->
    <div id="otpModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-[100] hidden flex items-center justify-center">
        <div id="otpModalContent" class="relative mx-auto p-8 border w-full max-w-md shadow-2xl rounded-xl bg-white transform transition-transform duration-300 scale-95">
            <!-- Modal Header -->
            <div class="text-center mb-8">
                <div class="mx-auto w-20 h-20 bg-blue-600 rounded-full flex items-center justify-center mb-6">
                    <svg class="w-10 h-10 text-white" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"></path>
                        <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"></path>
                    </svg>
                </div>
                <h3 class="text-xl font-bold text-gray-800 mb-3">Email Verification</h3>
                <p class="text-gray-600 text-base">
                    Enter the 6-digit verification code sent to your email
                </p>
            </div>

            <!-- OTP Error Message -->
            <div id="otpErrorMessage" class="hidden mb-6 rounded-lg bg-red-50 border border-red-200 p-4">
                <div class="flex items-center">
                    <svg class="w-5 h-5 text-red-400 mr-3" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                    </svg>
                    <p class="text-base font-medium text-red-800"></p>
                </div>
            </div>

            <!-- OTP Success Message -->
            <div id="otpSuccessMessage" class="hidden mb-6 rounded-lg bg-green-50 border border-green-200 p-4">
                <div class="flex items-center">
                    <svg class="w-5 h-5 text-green-400 mr-3" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 1186 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                    </svg>
                    <p class="text-base font-medium text-green-800">Login successful! Redirecting...</p>
                </div>
            </div>

            <!-- OTP Resend Success Message -->
            <div id="otpResendSuccessMessage" class="hidden mb-6 rounded-lg bg-blue-50 border border-blue-200 p-4 animate-pulse">
                <div class="flex items-center">
                    <svg class="w-5 h-5 text-blue-400 mr-3" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 1186 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                    </svg>
                    <p class="text-base font-medium text-blue-800">New verification code sent successfully!</p>
                </div>
            </div>

            <!-- OTP Input Section -->
            <div class="mb-8">
                <label class="block text-base font-medium text-gray-700 mb-4 text-center">
                    Enter Verification Code
                </label>
                
                <!-- OTP Input Fields Container -->
                <div class="flex justify-center space-x-3 mb-6">
                    <input type="text" id="otpInput1" maxlength="1" autocomplete="off" inputmode="numeric" 
                           class="w-12 h-12 text-center border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 text-xl font-semibold bg-white" />
                    <input type="text" id="otpInput2" maxlength="1" autocomplete="off" inputmode="numeric"
                           class="w-12 h-12 text-center border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 text-xl font-semibold bg-white" />
                    <input type="text" id="otpInput3" maxlength="1" autocomplete="off" inputmode="numeric"
                           class="w-12 h-12 text-center border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 text-xl font-semibold bg-white" />
                    <input type="text" id="otpInput4" maxlength="1" autocomplete="off" inputmode="numeric"
                           class="w-12 h-12 text-center border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 text-xl font-semibold bg-white" />
                    <input type="text" id="otpInput5" maxlength="1" autocomplete="off" inputmode="numeric"
                           class="w-12 h-12 text-center border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 text-xl font-semibold bg-white" />
                    <input type="text" id="otpInput6" maxlength="1" autocomplete="off" inputmode="numeric"
                           class="w-12 h-12 text-center border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-2 focus:ring-blue-200 text-xl font-semibold bg-white" />
                </div>
                
                <!-- Resend OTP -->
                <div class="text-center">
                    <button id="resendLoginOtpBtn" onclick="resendLoginOTP()" 
                            class="text-blue-600 hover:text-blue-700 text-base font-medium underline transition-colors disabled:text-gray-400 disabled:line-through disabled:no-underline disabled:cursor-not-allowed bg-transparent border-none cursor-pointer">
                        Resend Code
                    </button>
                </div>
            </div>

            <!-- Modal Buttons -->
            <div class="flex space-x-4">
                <button onclick="closeOTPModal()" 
                        class="flex-1 bg-gray-300 text-gray-700 py-3 px-6 rounded-lg hover:bg-gray-400 transition-colors font-medium text-base">
                    Cancel
                </button>
                <button id="verifyLoginOtpBtn" onclick="verifyLoginOTP()" disabled 
                        class="flex-1 bg-blue-600 text-white py-3 px-6 rounded-lg hover:bg-blue-700 transition-colors font-medium text-base disabled:opacity-50 disabled:cursor-not-allowed">
                    <span id="verifyLoginButtonText">Verify & Login</span>
                    <svg id="verifyLoginSpinner" class="hidden animate-spin -mr-1 ml-2 h-5 w-5 text-white inline" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const slidingPanel = document.getElementById('slidingPanel');
            const video = slidingPanel ? slidingPanel.querySelector('video') : null;
            if (!video) return;

            // Only jump to 6s if loaded directly at /auth/register
            if (window.location.pathname.toLowerCase().endsWith('/auth/register')) {
                video.currentTime = 11.25;
                video.play().catch(() => {});
            }

            // Remove the native loop attribute if present
            video.loop = false;

            // Loop video from 12s when it ends
            video.addEventListener('ended', function() {
                // Set to 9s and play again
                video.currentTime = 11.25; // Start from 12s
                // Wait for seek to complete before playing
                video.pause();
                video.addEventListener('seeked', function handler() {
                    video.play().catch(() => {});
                    video.removeEventListener('seeked', handler);
                });
            });

            // Tab switching logic (no reload, no video reset)
            const loginTab = document.getElementById('loginTab');
            const registerTab = document.getElementById('registerTab');
            const loginForm = document.getElementById('loginForm');
            const registerForm = document.getElementById('registerForm');

            if (loginTab && registerTab && loginForm && registerForm) {
                loginTab.addEventListener('click', function(e) {
                    e.preventDefault();
                    loginForm.style.display = '';
                    registerForm.style.display = 'none';
                });

                registerTab.addEventListener('click', function(e) {
                    e.preventDefault();
                    loginForm.style.display = 'none';
                    registerForm.style.display = '';
                });
            }
        });
        
        document.addEventListener('DOMContentLoaded', function() {
            const loginTab = document.getElementById('loginTab');
            const registerTab = document.getElementById('registerTab');
            const loginSection = document.getElementById('loginSection');
            const registerSection = document.getElementById('registerSection');
            const slidingPanel = document.getElementById('slidingPanel');
            const loginContent = document.getElementById('loginContent');
            
            let currentView = 'login'; // Default to login since it's the default route
            let isTransitioning = false;
            
            // Determine initial view based on current URL
            const currentPath = window.location.pathname.toLowerCase();
            console.log('Current path:', currentPath);
            
            if (currentPath.includes('/register')) {
                currentView = 'register';
            } else {
                currentView = 'login';
            }
            
            function showLogin() {
                if (currentView === 'login' || isTransitioning) return;
                
                isTransitioning = true;
                currentView = 'login';
                
                // Clear registration data when switching to login
                clearAllRegistrationData();
                localStorage.setItem('switchedToLogin', 'true');
                resetAllRegistrationForms();
                
                // CRITICAL: Clear register content immediately to prevent flash
                const registerContent = registerSection.querySelector('.h-full');
                if (registerContent) {
                    registerContent.innerHTML = '<div class="p-6 h-full"><div class="text-center flex flex-col items-center justify-center h-full"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div><p class="text-gray-600">Loading...</p></div></div>';
                }
                
                // Update tabs with animation
                updateTabsForLogin();
                
                // Hide register section immediately
                registerSection.style.transition = 'transform 0.4s ease-out, opacity 0.4s ease-out';
                registerSection.style.transform = 'translateX(100%)';
                registerSection.style.opacity = '0';
                
                // Animate sliding panel to cover register (move right)
                slidingPanel.style.transform = 'translateX(100%)';
                
                // Show and animate login section from left
                setTimeout(() => {
                    loginSection.classList.remove('hidden');
                    loginSection.style.transition = 'transform 0.4s ease-out, opacity 0.4s ease-out';
                    loginSection.style.transform = 'translateX(0)';
                    loginSection.style.opacity = '1';
                    
                    // Load login content ONLY when switching to login tab
                    loadLoginContent();
                }, 200);
                
                setTimeout(() => {
                    registerSection.classList.add('hidden');
                    registerSection.style.transition = '';
                    registerSection.style.transform = '';
                    registerSection.style.opacity = '';
                    
                    loginSection.style.transition = '';
                    loginSection.style.transform = '';
                    loginSection.style.opacity = '';
                    
                    isTransitioning = false;
                }, 600);
                
                // Update URL without page reload
                window.history.pushState({}, '', '/Auth/Login');
                
                scrollToTop();
                
                handleVideoForView('login');
            }
            
            function showRegister() {
                if (currentView === 'register' || isTransitioning) return;
                
                isTransitioning = true;
                currentView = 'register';
                
                // Mark that we're navigating (for future page loads)
                sessionStorage.setItem('hasNavigated', 'true');
                
                // Clear login switch flags
                localStorage.removeItem('switchedToLogin');
                localStorage.removeItem('resetToStep1');
                
                // CRITICAL: Clear login content immediately to prevent flash
                loginContent.innerHTML = '<div id="loginLoader" class="text-center flex flex-col items-center justify-center h-full"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-4"></div><p class="text-gray-600">Loading...</p></div>';
                
                // Update tabs immediately for responsive feel
                updateTabsForRegister();
                
                // Hide login section immediately with longer animation
                loginSection.style.transition = 'transform 0.8s ease-out, opacity 0.8s ease-out';
                loginSection.style.transform = 'translateX(-100%)';
                loginSection.style.opacity = '0';
                
                // Start the visual transition animations
                // 1. Slide the panel to cover login (move left) with longer duration
                slidingPanel.style.transition = 'transform 0.8s cubic-bezier(0.4, 0, 0.2, 1)';
                slidingPanel.style.transform = 'translateX(0%)';
                
                // 2. Show and animate register section from right with longer animation
                setTimeout(() => {
                    registerSection.classList.remove('hidden');
                    registerSection.style.transition = 'transform 0.8s ease-out, opacity 0.8s ease-out';
                    registerSection.style.transform = 'translateX(0)';
                    registerSection.style.opacity = '1';
                    
                    // 3. Navigate much later in the transition for smoother experience
                    setTimeout(() => {
                        window.location.href = '/Auth/Register';
                    }, 600); // Increased delay to 600ms (was 200ms)
                    
                }, 300); // Increased initial delay to 300ms (was 200ms)
                
                // Clean up after longer animation completes
                setTimeout(() => {
                    loginSection.classList.add('hidden');
                    loginSection.style.transition = '';
                    loginSection.style.transform = '';
                    loginSection.style.opacity = '';
                    
                    registerSection.style.transition = '';
                    registerSection.style.transform = '';
                    registerSection.style.opacity = '';
                    
                    slidingPanel.style.transition = '';
                    
                    isTransitioning = false;
                }, 1200); // Increased cleanup delay to 1200ms (was 600ms)
                
                scrollToTop();
                
                handleVideoForView('register');
            }
            
            function updateTabsForLogin() {
                // Update login tab
                loginTab.classList.add('border-blue-600', 'bg-blue-50', 'border-b-2');
                loginTab.querySelector('span').classList.remove('text-gray-600');
                loginTab.querySelector('span').classList.add('text-blue-600');
                
                // Update register tab
                registerTab.classList.remove('border-blue-600', 'bg-blue-50', 'border-b-2');
                registerTab.classList.add('border-transparent');
                registerTab.querySelector('span').classList.remove('text-blue-600');
                registerTab.querySelector('span').classList.add('text-gray-600');
            }
            
            function updateTabsForRegister() {
                // Update register tab
                registerTab.classList.add('border-blue-600', 'bg-blue-50', 'border-b-2');
                registerTab.querySelector('span').classList.remove('text-gray-600');
                registerTab.querySelector('span').classList.add('text-blue-600');
                
                // Update login tab
                loginTab.classList.remove('border-blue-600', 'bg-blue-50', 'border-b-2');
                loginTab.classList.add('border-transparent');
                loginTab.querySelector('span').classList.remove('text-blue-600');
                loginTab.querySelector('span').classList.add('text-gray-600');
            }
            
            function loadLoginContent() {
                // Only proceed if we're actually switching to login view
                if (currentView !== 'login') {
                    console.log('Not loading login content - not on login view');
                    return;
                }
                
                // Load login content via AJAX
                fetch('/Auth/Login')
                    .then(response => response.text())
                    .then(html => {
                        // Parse the HTML response
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(html, 'text/html');
                        
                        // Extract only the main content div from the login page, not the entire layout
                        const mainContent = doc.querySelector('.p-6.h-full');
                        
                        if (mainContent) {
                            // Get just the inner content without the wrapper div
                            loginContent.innerHTML = mainContent.innerHTML;
                            
                            // Re-initialize login form scripts after content is loaded
                            initializeLoginForm();
                            
                            // Load and execute all the login-related scripts
                            loadLoginScripts();
                        } else {
                            // If we can't find the content, just show a simple message
                            loginContent.innerHTML = '<div class="text-center"><p class="text-gray-600">Please wait while login form loads...</p></div>';
                            
                            // Try to redirect to actual login page as fallback
                            setTimeout(() => {
                                window.location.href = '/Auth/Login';
                            }, 2000);
                        }
                    })
                    .catch(error => {
                        console.error('Error loading login content:', error);
                        // On error, redirect to login page instead of showing fallback form
                        loginContent.innerHTML = '<div class="text-center"><p class="text-gray-600">Loading login form...</p></div>';
                        setTimeout(() => {
                            window.location.href = '/Auth/Login';
                        }, 1000);
                    });
            }
            
            function loadLoginScripts() {
                // Create and load all required login scripts
                const scriptsToLoad = [
                    '/js/Login.js',
                    '/js/LoginOTP.js', 
                    '/js/ForgotPassword.js',
                    '/js/NewPassword.js'
                ];
                
                // Remove any existing login scripts first
                const existingScripts = document.querySelectorAll('script[data-login-script]');
                existingScripts.forEach(script => script.remove());
                
                // Load each script sequentially
                loadScriptsSequentially(scriptsToLoad, 0);
            }
            
            function loadScriptsSequentially(scripts, index) {
                if (index >= scripts.length) {
                    // All scripts loaded, now initialize everything
                    setTimeout(initializeAllLoginFunctions, 100);
                    return;
                }
                
                const script = document.createElement('script');
                script.src = scripts[index];
                script.setAttribute('data-login-script', 'true');
                script.onload = () => {
                    console.log(`Loaded script: ${scripts[index]}`);
                    loadScriptsSequentially(scripts, index + 1);
                };
                script.onerror = () => {
                    console.error(`Failed to load script: ${scripts[index]}`);
                    loadScriptsSequentially(scripts, index + 1);
                };
                document.head.appendChild(script);
            }
            
            function initializeAllLoginFunctions() {
                console.log('Initializing all login functions...');
                
                // Wait a bit more for all scripts to be fully processed
                setTimeout(() => {
                    // Bind all the login event listeners
                    bindLoginEventListeners();
                    
                    // Initialize OTP inputs if they exist
                    if (typeof setupOTPInputs === 'function') {
                        setupOTPInputs();
                    }
                    
                    // Make sure all global functions are available
                    ensureLoginFunctionsAvailable();
                    
                    console.log('Login functions initialization complete');
                }, 200);
            }
            
            function bindLoginEventListeners() {
                // Bind login button with duplicate prevention
                const loginBtn = document.getElementById('loginButton');
                if (loginBtn && !loginBtn.hasAttribute('data-listener-bound')) {
                    // Mark as bound to prevent duplicate listeners
                    loginBtn.setAttribute('data-listener-bound', 'true');
                    
                    // Remove any existing listeners first
                    loginBtn.replaceWith(loginBtn.cloneNode(true));
                    const newLoginBtn = document.getElementById('loginButton');
                    newLoginBtn.setAttribute('data-listener-bound', 'true');
                    
                    newLoginBtn.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        
                        if (typeof performLogin === 'function') {
                            performLogin();
                        } else {
                            console.error('performLogin function not available');
                        }
                    });
                }
                
                // Bind OTP modal buttons if they exist with duplicate prevention
                const verifyOtpBtn = document.getElementById('verifyLoginOtpBtn');
                if (verifyOtpBtn && !verifyOtpBtn.hasAttribute('data-listener-bound')) {
                    verifyOtpBtn.setAttribute('data-listener-bound', 'true');
                    verifyOtpBtn.removeAttribute('onclick');
                    verifyOtpBtn.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        
                        if (typeof verifyLoginOTP === 'function') {
                            verifyLoginOTP();
                        } else {
                            console.error('verifyLoginOTP function not available');
                        }
                    });
                }
                
                const resendOtpBtn = document.getElementById('resendLoginOtpBtn');
                if (resendOtpBtn && !resendOtpBtn.hasAttribute('data-listener-bound')) {
                    resendOtpBtn.setAttribute('data-listener-bound', 'true');
                    resendOtpBtn.removeAttribute('onclick');
                    resendOtpBtn.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();
                        
                        if (typeof resendLoginOTP === 'function') {
                            resendLoginOTP();
                        } else {
                            console.error('resendLoginOTP function not available');
                        }
                    });
                }
                
                // Bind forgot password button
                const forgotPasswordBtns = document.querySelectorAll('[onclick*="showForgotPasswordModal"]');
                forgotPasswordBtns.forEach(btn => {
                    // Remove onclick attribute and add event listener
                    btn.removeAttribute('onclick');
                    btn.addEventListener('click', function() {
                        if (typeof showForgotPasswordModal === 'function') {
                            showForgotPasswordModal();
                        } else {
                            console.error('showForgotPasswordModal function not available');
                        }
                    });
                });
                
                // Bind register button
                const registerBtns = document.querySelectorAll('[onclick*="goToRegister"]');
                registerBtns.forEach(btn => {
                    btn.removeAttribute('onclick');
                    btn.addEventListener('click', function() {
                        showRegister();
                    });
                });
                
                // Bind password toggle
                const passwordToggleBtns = document.querySelectorAll('[onclick*="togglePassword"]');
                passwordToggleBtns.forEach(btn => {
                    btn.removeAttribute('onclick');
                    btn.addEventListener('click', function() {
                        if (typeof togglePassword === 'function') {
                            togglePassword();
                        } else {
                            // Fallback password toggle
                            const passwordField = document.getElementById('loginPassword');
                            if (passwordField) {
                                const type = passwordField.type === 'password' ? 'text' : 'password';
                                passwordField.type = type;
                            }
                        }
                    });
                });
                
                // Bind close OTP modal buttons
                const closeOtpBtns = document.querySelectorAll('[onclick*="closeOTPModal"]');
                closeOtpBtns.forEach(btn => {
                    btn.removeAttribute('onclick');
                    btn.addEventListener('click', function() {
                        if (typeof closeOTPModal === 'function') {
                            closeOTPModal();
                        } else {
                            console.error('closeOTPModal function not available');
                        }
                    });
                });
                
                console.log('All login event listeners bound successfully');
            }
            
            function ensureLoginFunctionsAvailable() {
                // Create fallback functions if the main ones aren't loaded
                if (typeof window.performLogin !== 'function') {
                    window.performLogin = function() {
                        console.error('Login function not properly loaded');
                        alert('Login system not ready. Please refresh the page.');
                    };
                }
                
                if (typeof window.showForgotPasswordModal !== 'function') {
                    window.showForgotPasswordModal = function() {
                        console.error('Forgot password function not properly loaded');
                        alert('Forgot password system not ready. Please refresh the page.');
                    };
                }
                
                if (typeof window.togglePassword !== 'function') {
                    window.togglePassword = function() {
                        const passwordField = document.getElementById('loginPassword');
                        if (passwordField) {
                            const type = passwordField.type === 'password' ? 'text' : 'password';
                            passwordField.type = type;
                        }
                    };
                }
                
                // Make all functions globally available
                window.goToRegister = showRegister;
            }
            
            function initializeLoginForm() {
                // This function is now primarily for compatibility
                // The real initialization happens in initializeAllLoginFunctions
                console.log('Legacy initializeLoginForm called - deferring to complete initialization');
            }
            
            function scrollToTop() {
                const mainContent = document.querySelector('.w-full.max-w-6xl.h-\\[700px\\]');
                if (mainContent) {
                    mainContent.scrollTo({ top: 0, behavior: 'smooth' });
                }
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
            
            function clearAllRegistrationData() {
                sessionStorage.removeItem('registrationData');
                sessionStorage.removeItem('otpId');
                sessionStorage.removeItem('faceImage');
                localStorage.removeItem('otpCooldownEnd');
                localStorage.removeItem('registrationCompleted');
            }
            
            function resetAllRegistrationForms() {
                if (window.resetAllRegistrationState && typeof window.resetAllRegistrationState === 'function') {
                    window.resetAllRegistrationState();
                }
            }
            
            function handleVideoForView(view) {
                const slidingPanel = document.getElementById('slidingPanel');
                const video = slidingPanel ? slidingPanel.querySelector('video') : null;
                if (!video) return;

                if (view === 'register') {
                    // Jump to 5 seconds and play
                    video.currentTime = 11.25;
                    video.play().catch(() => {});
                } else {
                    // Start from beginning for login or other views
                    video.currentTime = 0;
                    video.play().catch(() => {});
                }
            }

            // Event listeners
            loginTab.addEventListener('click', showLogin);
            registerTab.addEventListener('click', showRegister);
            
            // Make functions available globally
            window.showLogin = showLogin;
            window.showRegister = showRegister;
            
            // Initialize with correct view
            if (currentView === 'login') {
                updateTabsForLogin();
                slidingPanel.style.transform = 'translateX(100%)';
                loginSection.classList.remove('hidden');
                registerSection.classList.add('hidden');
                
                // CRITICAL: Clear any existing register content to prevent flash
                const registerContent = registerSection.querySelector('.h-full');
                if (registerContent) {
                    registerContent.innerHTML = '<div class="p-6 h-full"><div class="text-center flex flex-col items-center justify-center h-full"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div><p class="text-gray-600">Loading...</p></div></div>';
                }
                
                // Show login section immediately without animation
                loginSection.style.transform = 'translateX(0)';
                loginSection.style.opacity = '1';
                
                // Load login content immediately for direct navigation
                loadLoginContent();
                
                // ABSOLUTELY DO NOT load register content when on login page
                console.log('Login page initialized - register content cleared');
            } else {
                // Register view - keep login content completely unloaded
                updateTabsForRegister();
                
                // Keep login section completely hidden and don't load content
                loginSection.classList.add('hidden');
                loginSection.style.transform = 'translateX(-100%)';
                loginSection.style.opacity = '0';
                
                // CRITICAL: Clear any existing login content to prevent flash
                loginContent.innerHTML = '<div id="loginLoader" class="text-center flex flex-col items-center justify-center h-full"><div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-4"></div><p class="text-gray-600">Loading...</p></div>';
                
                const isInitialLoad = !sessionStorage.getItem('hasNavigated');
                
                if (isInitialLoad) {
                    // First time loading register - much smoother initial animation
                    slidingPanel.style.transition = 'none';
                    slidingPanel.style.transform = 'translateX(100%)';
                    registerSection.classList.remove('hidden');
                    
                    // Force reflow to ensure initial position is set
                    slidingPanel.offsetHeight;
                    registerSection.offsetHeight;
                    
                    // Start smooth entrance animation after a brief delay
                    setTimeout(() => {
                        // Enable smooth transitions with longer duration
                        slidingPanel.style.transition = 'transform 1.2s cubic-bezier(0.4, 0, 0.2, 1)';
                        registerSection.style.transition = 'opacity 1.0s cubic-bezier(0.4, 0, 0.2, 1), transform 1.0s cubic-bezier(0.4, 0, 0.2, 1)';
                        
                        // Animate slider to final position (covering left side)
                        slidingPanel.style.transform = 'translateX(0%)';
                        
                        // Animate register content sliding in from right
                        setTimeout(() => {
                            registerSection.style.opacity = '1';
                            registerSection.style.transform = 'translateX(0)';
                            
                            // Clean up styles after animation completes
                            setTimeout(() => {
                                registerSection.style.transition = '';
                                registerSection.style.opacity = '';
                                registerSection.style.transform = '';
                                slidingPanel.style.transition = '';
                            }, 1000); // Increased cleanup delay
                        }, 400); // Increased delay for more natural feel
                        
                    }, 150); // Slightly longer initial delay
                    
                    // Mark that we've done initial navigation
                    sessionStorage.setItem('hasNavigated', 'true');
                } else {
                    // Already navigated before (refresh/direct load) - instant setup without animation
                    slidingPanel.style.transform = 'translateX(0%)';
                    registerSection.classList.remove('hidden');
                    registerSection.style.transform = 'translateX(0)';
                    registerSection.style.opacity = '1';
                }
                
                // ABSOLUTELY DO NOT load login content when on register page
                // Login content will ONLY be loaded when user actively clicks login tab
                console.log('Register page initialized - login content NOT loaded');
            }
            
            // Listen for registration completion
            window.addEventListener('registrationCompleted', function(event) {
                console.log('Registration completed, switching to login');
                clearAllRegistrationData();
                setTimeout(() => showLogin(), 100);
            });
            
            // Handle browser back/forward
            window.addEventListener('popstate', function(event) {
                const path = window.location.pathname.toLowerCase();
                if (path.includes('/register')) {
                    if (currentView !== 'register') showRegister();
                } else {
                    if (currentView !== 'login') showLogin();
                }
            });
            
            // Check if user was redirected from logout
            const urlParams = new URLSearchParams(window.location.search);
            const fromLogout = urlParams.get('logout') === 'true';
            
            if (fromLogout) {
                // Add entrance animation from logout
                const authContainer = document.getElementById('authLayoutContainer');
                const welcomeMessage = document.getElementById('welcomeBackMessage');
                
                if (authContainer) {
                    authContainer.classList.add('auth-entrance-from-logout');
                }
                
                if (welcomeMessage) {
                    welcomeMessage.classList.remove('hidden');
                }
                
                // Hide welcome message after a few seconds
                setTimeout(() => {
                    if (welcomeMessage) {
                        welcomeMessage.style.animation = 'welcomeBackMessage 0.4s ease-in reverse';
                        setTimeout(() => {
                            welcomeMessage.classList.add('hidden');
                            welcomeMessage.style.animation = '';
                        }, 400);
                    }
                }, 3000);
                
                // Clean URL
                const cleanUrl = window.location.pathname;
                window.history.replaceState({}, document.title, cleanUrl);
            }
            
            // Initial video handling
            handleVideoForView(currentView);
        });
        
        // On initial page load, check if we're on the Register page
        document.addEventListener('DOMContentLoaded', function() {
            const slidingPanel = document.getElementById('slidingPanel');
            const video = slidingPanel ? slidingPanel.querySelector('video') : null;
            if (!video) return;

            // Only jump to 6s if loaded directly at /auth/register
            if (window.location.pathname.toLowerCase().endsWith('/auth/register')) {
                video.currentTime = 11.25;
                video.play().catch(() => {});
            }

            // Remove the native loop attribute if present
            video.loop = false;

            // Loop video from 9s when it ends
            video.addEventListener('ended', function() {
                // Set to 9s and play again
                video.currentTime = 11.25;
                // Wait for seek to complete before playing
                video.pause();
                video.addEventListener('seeked', function handler() {
                    video.play().catch(() => {});
                    video.removeEventListener('seeked', handler);
                });
            });

            // Tab switching logic (no reload, no video reset)
            const loginTab = document.getElementById('loginTab');
            const registerTab = document.getElementById('registerTab');
            const loginForm = document.getElementById('loginForm');
            const registerForm = document.getElementById('registerForm');

            if (loginTab && registerTab && loginForm && registerForm) {
                loginTab.addEventListener('click', function(e) {
                    e.preventDefault();
                    loginForm.style.display = '';
                    registerForm.style.display = 'none';
                });

                registerTab.addEventListener('click', function(e) {
                    e.preventDefault();
                    loginForm.style.display = 'none';
                    registerForm.style.display = '';
                });
            }
        });
    </script>
</body>
</html>
