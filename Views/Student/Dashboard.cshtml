@{
    ViewData["Title"] = "Dashboard";
    Layout = "_Layout";
    
    // Declare variables at the top level to ensure they're available throughout the view
    var dashboardData = ViewBag.DashboardData as AttendanceApp_ASPNET.Services.StudentDashboardData;
    var todaySchedule = dashboardData?.TodaySchedule ?? new List<AttendanceApp_ASPNET.Services.DashboardScheduleItem>();
    var allSchedules = dashboardData?.AllSchedules ?? new List<AttendanceApp_ASPNET.Services.DashboardScheduleItem>();
    var daysOfWeek = new[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
}

<!-- Welcome Section with Heat Index -->
<div class="mb-8">
    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
        <!-- Welcome Card - Full Width -->
        <div class="col-span-1 lg:col-span-4 bg-gradient-to-r from-blue-600 to-blue-800 rounded-lg p-6 text-white dashboard-card-entrance">
            <div class="flex flex-col md:flex-row items-start md:items-center justify-between">
                <div class="mb-4 md:mb-0">
                    <h1 class="text-2xl font-bold mb-2">Welcome back, @ViewBag.FirstName!</h1>
                    <p class="text-blue-100">
                        @if (ViewBag.IsOnboarded == true)
                        {
                            @:Ready to track your attendance today?
                        }
                        else
                        {
                            @:Your account setup is in progress.
                        }
                    </p>
                </div>
                <div class="text-right">
                    <div class="text-blue-100 text-sm">Student Number</div>
                    <div class="text-xl font-semibold">@ViewBag.StudentNumber</div>
                    @if (ViewBag.Verified == "1")
                    {
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 mt-2">
                            <i class="fas fa-check-circle mr-1"></i>
                            Verified
                        </span>
                    }
                    else
                    {
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 mt-2">
                            <i class="fas fa-clock mr-1"></i>
                            Pending Verification
                        </span>
                    }

                    @if (ViewBag.HasSection == true)
                    {
                        <div class="mt-1">
                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                <i class="fas fa-users mr-1"></i>
                                Section Assigned
                            </span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Main Action Cards -->
<div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
    <!-- Current Class & Attendance Status -->
    <div class="bg-white rounded-lg shadow-sm p-6 hover:shadow-md transition-shadow duration-200 dashboard-card-entrance">
        @if (ViewBag.HasDashboardData == true && ViewBag.HasCurrentClass == true)
        {
            <div class="flex items-center mb-4">
                <div class="w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center">
                    <i class="fas fa-clock text-indigo-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <h3 class="text-lg font-semibold text-gray-900">Current Class</h3>
                    <p class="text-gray-500 text-sm">@ViewBag.CurrentClass.CourseName</p>
                </div>
            </div>
            <div class="space-y-2 mb-4">
                <div class="flex justify-between items-center">
                    <span class="text-sm text-gray-600">Course Code:</span>
                    <span class="text-sm font-medium text-gray-900">@(ViewBag.CurrentClass.CourseCode ?? "N/A")</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-sm text-gray-600">Faculty:</span>
                    <span class="text-sm font-medium text-gray-900">@ViewBag.CurrentClass.FacultyName</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-sm text-gray-600">Room:</span>
                    <span class="text-sm font-medium text-gray-900">@(ViewBag.CurrentClass.Room ?? "TBA")</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-sm text-gray-600">Time:</span>
                    <span class="text-sm font-medium text-gray-900">@ViewBag.CurrentClass.StartTime - @ViewBag.CurrentClass.EndTime</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-sm text-gray-600">Status:</span>
                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                        <i class="fas fa-clock mr-1"></i>
                        @{
                            var status = ViewBag.CurrentClass.Status?.ToString() ?? "Unknown";
                            var titleCaseStatus = char.ToUpper(status[0]) + status.Substring(1).ToLower();
                        }
                        @titleCaseStatus
                    </span>
                </div>
            </div>
            <!-- Mark Attendance Button - Centered at Bottom -->
            <div class="text-center">
                <button class="bg-green-600 text-white py-3 px-6 rounded-lg hover:bg-green-700 transition-colors duration-200 font-semibold flex items-center justify-center mx-auto">
                    <i class="fas fa-camera mr-2"></i>Mark Attendance
                </button>
            </div>
        }
        else if (ViewBag.HasDashboardData == true)
        {
            <div class="text-center py-4 mb-4">
                <div class="w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center mx-auto mb-3">
                    <i class="fas fa-calendar-times text-gray-400 text-2xl"></i>
                </div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">No Current Class</h3>
                <p class="text-gray-500 text-sm mb-2">No class is currently in session</p>
                @if (ViewBag.DashboardData != null && ViewBag.DashboardData.ScheduleSummary.NextClass != null)
                {
                    <p class="text-xs text-gray-400">Next: @ViewBag.DashboardData.ScheduleSummary.NextClass.CourseName</p>
                    <p class="text-xs text-gray-400">at @ViewBag.DashboardData.ScheduleSummary.NextClass.StartTime</p>
                }
                else
                {
                    <p class="text-xs text-gray-400">Check your schedule for upcoming classes</p>
                }
            </div>
            <!-- Mark Attendance Button - Centered at Bottom (Disabled) -->
            <div class="text-center">
                <button class="bg-gray-400 text-white py-3 px-6 rounded-lg cursor-not-allowed font-semibold flex items-center justify-center mx-auto" disabled>
                    <i class="fas fa-clock mr-2"></i>No Active Class
                </button>
            </div>
        }
        else if (ViewBag.HasSection == true)
        {
            <div class="flex items-center mb-4">
                <div class="w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center">
                    <i class="fas fa-clock text-indigo-600 text-xl"></i>
                </div>
                <div class="ml-4">
                    <h3 class="text-lg font-semibold text-gray-900">Current Class</h3>
                    <p class="text-gray-500 text-sm">Loading...</p>
                </div>
            </div>
            <!-- Mark Attendance Button - Centered at Bottom -->
            <div class="text-center">
                <button class="bg-green-600 text-white py-3 px-6 rounded-lg hover:bg-green-700 transition-colors duration-200 font-semibold flex items-center justify-center mx-auto">
                    <i class="fas fa-camera mr-2"></i>Mark Attendance
                </button>
            </div>
        }
        else
        {
            <div class="flex items-center mb-4">
                <div class="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center">
                    <i class="fas fa-exclamation-triangle text-gray-400 text-xl"></i>
                </div>
                <div class="ml-4">
                    <h3 class="text-lg font-semibold text-gray-900">Current Class</h3>
                    <p class="text-gray-500 text-sm">No section assigned</p>
                </div>
            </div>
            <div class="text-center py-4 mb-4">
                <p class="text-gray-500 text-sm">
                    @if (ViewBag.HasDashboardData == false && !string.IsNullOrEmpty(ViewBag.DashboardError?.ToString()))
                    {
                        @:Unable to load class data: @ViewBag.DashboardError
                    }
                    else
                    {
                        @:Section assignment required to view class information.
                    }
                </p>
            </div>
            <!-- Mark Attendance Button - Centered at Bottom (Disabled) -->
            <div class="text-center">
                <button class="bg-gray-400 text-white py-3 px-6 rounded-lg cursor-not-allowed font-semibold flex items-center justify-center mx-auto" disabled>
                    <i class="fas fa-exclamation-triangle mr-2"></i>Setup Required
                </button>
            </div>
        }
    </div>

    <!-- Weather Widget -->
    <div class="bg-white rounded-lg shadow-sm p-6 hover:shadow-md transition-shadow duration-200 dashboard-card-entrance">
        @if (ViewBag.WeatherDataAvailable == true)
        {
            <div class="flex items-center mb-4">
                <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                    @if (!string.IsNullOrEmpty(ViewBag.WeatherIcon?.ToString()))
                    {
                        <img src="https:@ViewBag.WeatherIcon" alt="Weather" class="w-8 h-8" />
                    }
                    else
                    {
                        <i class="fas fa-cloud-sun text-blue-600 text-xl"></i>
                    }
                </div>
                <div class="ml-4">
                    <h3 class="text-lg font-semibold text-gray-900">Weather</h3>
                    <p class="text-gray-500 text-sm">@ViewBag.WeatherLocation</p>
                </div>
            </div>
            <div class="space-y-2">
                <div class="flex justify-between items-center">
                    <span class="text-sm text-gray-600">Temperature:</span>
                    <span class="text-sm font-medium text-gray-900">@ViewBag.Temperature°C</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-sm text-gray-600">Wind speed:</span>
                    <span class="text-sm font-medium text-gray-900">@ViewBag.WindSpeed km/h</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-sm text-gray-600">Condition:</span>
                    <span class="text-sm font-medium text-gray-900">@ViewBag.WeatherCondition</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-sm text-gray-600">Humidity:</span>
                    <span class="text-sm font-medium text-gray-900">@ViewBag.Humidity%</span>
                </div>
                @if (ViewBag.RainChance != null && ViewBag.RainChance > 0)
                {
                    <div class="flex justify-between items-center">
                        <span class="text-sm text-gray-600">Rain chance:</span>
                        <span class="text-sm font-medium text-blue-600">@ViewBag.RainChance%</span>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="flex items-center mb-4">
                <div class="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center">
                    <i class="fas fa-exclamation-triangle text-gray-400 text-xl"></i>
                </div>
                <div class="ml-4">
                    <h3 class="text-lg font-semibold text-gray-900">Weather</h3>
                    <p class="text-gray-500 text-sm">@(ViewBag.WeatherLocation ?? "Location unavailable")</p>
                </div>
            </div>
            <div class="text-center py-2">
                <p class="text-gray-500 text-sm">@(ViewBag.WeatherError ?? "Weather data unavailable")</p>
            </div>
        }
    </div>

    <!-- Heat Index Summary Card -->
    @if (ViewBag.WeatherDataAvailable == true)
    {
        <div class="bg-white rounded-lg shadow-sm p-6 hover:shadow-md transition-shadow duration-200 dashboard-card-entrance">
            <div class="flex items-center justify-between mb-4">
                <div class="flex items-center">
                    <div class="w-12 h-12 bg-orange-100 rounded-lg flex items-center justify-center">
                        <i class="fas fa-thermometer-half text-orange-600 text-xl"></i>
                    </div>
                    <div class="ml-4">
                        <h3 class="text-lg font-semibold text-gray-900">Temperature Forecast</h3>
                        <p class="text-gray-500 text-sm">@ViewBag.WeatherLocation</p>
                    </div>
                </div>
                <div class="text-right">
                    <div class="text-orange-600 text-sm font-medium">Feels like now</div>
                    <div class="text-2xl font-bold text-orange-600">@ViewBag.HeatIndex°C</div>
                </div>
            </div>
            <div class="space-y-2">
                <div class="flex justify-between items-center">
                    <span class="text-sm text-gray-600">Current:</span>
                    <span class="text-sm font-medium text-gray-900">@ViewBag.Temperature°C</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-sm text-gray-600">High today:</span>
                    <span class="text-sm font-medium text-red-600">@ViewBag.MaxTemperature°C</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-sm text-gray-600">Low today:</span>
                    <span class="text-sm font-medium text-blue-600">@ViewBag.MinTemperature°C</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-sm text-gray-600">Max feels like:</span>
                    <span class="text-sm font-medium text-orange-600">@ViewBag.MaxFeelsLike°C</span>
                </div>
                <div class="flex justify-between items-center">
                    <span class="text-sm text-gray-600">Heat level:</span>
                    <span class="text-sm font-medium text-orange-600">
                        @{
                            var heatIndexMain = ViewBag.HeatIndex != null ? (double)ViewBag.HeatIndex : 0;
                            var heatLevelMain = heatIndexMain >= 35 ? "Extreme" : heatIndexMain >= 30 ? "High" : heatIndexMain >= 25 ? "Moderate" : "Low";
                        }
                        @heatLevelMain
                    </span>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="bg-white rounded-lg shadow-sm p-6 hover:shadow-md transition-shadow duration-200 dashboard-card-entrance">
            <div class="flex items-center mb-4">
                <div class="w-12 h-12 bg-gray-100 rounded-lg flex items-center justify-center">
                    <i class="fas fa-exclamation-triangle text-gray-400 text-xl"></i>
                </div>
                <div class="ml-4">
                    <h3 class="text-lg font-semibold text-gray-900">Temperature Forecast</h3>
                    <p class="text-gray-500 text-sm">@(ViewBag.WeatherLocation ?? "Location unavailable")</p>
                </div>
            </div>
            <div class="text-center py-2">
                <p class="text-gray-500 text-sm">@(ViewBag.WeatherError ?? "Weather data unavailable")</p>
            </div>
        </div>
    }
</div>

<!-- Statistics Cards -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
    <!-- Total Classes -->
    <div class="bg-white rounded-lg shadow-sm p-6 dashboard-card-entrance">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-sm font-medium text-gray-600">Enrolled Courses</p>
                <p class="text-2xl font-bold text-gray-900">
                    @if (ViewBag.HasDashboardData == true)
                    {
                        @ViewBag.TotalEnrolledCourses
                    }
                    else
                    {
                        @:24
                    }
                </p>
            </div>
            <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                <i class="fas fa-book text-blue-600"></i>
            </div>
        </div>
        <p class="mt-2 text-sm text-gray-500">
            @if (ViewBag.HasDashboardData == true)
            {
                @:Current semester
            }
            else
            {
                @:This semester
            }
        </p>
    </div>

    <!-- Present -->
    <div class="bg-white rounded-lg shadow-sm p-6 dashboard-card-entrance">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-sm font-medium text-gray-600">
                    @if (ViewBag.HasDashboardData == true)
                    {
                        @:Classes Today
                    }
                    else
                    {
                        @:Present
                    }
                </p>
                <p class="text-2xl font-bold text-green-600">
                    @if (ViewBag.HasDashboardData == true && ViewBag.DashboardData != null)
                    {
                        @ViewBag.DashboardData.ScheduleSummary.TotalClassesToday
                    }
                    else
                    {
                        @:18
                    }
                </p>
            </div>
            <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                <i class="fas fa-check text-green-600"></i>
            </div>
        </div>
        <p class="mt-2 text-sm text-gray-500">
            @if (ViewBag.HasDashboardData == true)
            {
                @:@DateTime.Now.ToString("dddd")
            }
            else
            {
                @:75% attendance
            }
        </p>
    </div>

    <!-- Pending Approvals -->
    <div class="bg-white rounded-lg shadow-sm p-6 dashboard-card-entrance">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-sm font-medium text-gray-600">
                    @if (ViewBag.HasDashboardData == true)
                    {
                        @:Pending Approvals
                    }
                    else
                    {
                        @:Absent
                    }
                </p>
                <p class="text-2xl font-bold text-red-600">
                    @if (ViewBag.HasDashboardData == true)
                    {
                        @ViewBag.PendingApprovals
                    }
                    else
                    {
                        @:6
                    }
                </p>
            </div>
            <div class="w-8 h-8 bg-red-100 rounded-full flex items-center justify-center">
                <i class="fas fa-times text-red-600"></i>
            </div>
        </div>
        <p class="mt-2 text-sm text-gray-500">
            @if (ViewBag.HasDashboardData == true)
            {
                @:Awaiting approval
            }
            else
            {
                @:25% missed
            }
        </p>
    </div>

    <!-- This Week -->
    <div class="bg-white rounded-lg shadow-sm p-6 dashboard-card-entrance">
        <div class="flex items-center justify-between">
            <div>
                <p class="text-sm font-medium text-gray-600">This Week</p>
                <p class="text-2xl font-bold text-blue-600">5/5</p>
            </div>
            <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                <i class="fas fa-calendar-week text-blue-600"></i>
            </div>
        </div>
        <p class="mt-2 text-sm text-gray-500">Perfect week!</p>
    </div>
</div>

<!-- Recent Activity & Upcoming Classes -->
<div class="grid grid-cols-1 gap-8">
    <!-- Schedule with Calendar Filter -->
    <div class="bg-white rounded-lg shadow-sm dashboard-card-entrance">
        <div class="p-6 border-b border-gray-200">
            <h3 class="text-lg font-semibold text-gray-900">
                @if (ViewBag.HasDashboardData == true)
                {
                    @:Class Schedule
                }
                else
                {
                    @:Upcoming Classes
                }
            </h3>
        </div>
        <div class="p-6">
            @if (ViewBag.HasDashboardData == true && ViewBag.DashboardData != null)
            {
                <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
                    <!-- Calendar Widget -->
                    <div class="lg:col-span-1">
                        <div class="bg-gray-50 rounded-lg p-4">
                            <h4 class="font-semibold text-gray-900 mb-3">Calendar</h4>
                            
                            <!-- Calendar Header -->
                            <div class="flex items-center justify-between mb-4">
                                <button id="prevMonth" class="p-1 hover:bg-gray-200 rounded">
                                    <i class="fas fa-chevron-left text-gray-600"></i>
                                </button>
                                <h5 id="currentMonth" class="font-medium text-gray-900"></h5>
                                <button id="nextMonth" class="p-1 hover:bg-gray-200 rounded">
                                    <i class="fas fa-chevron-right text-gray-600"></i>
                                </button>
                            </div>
                            
                            <!-- Calendar Grid -->
                            <div class="grid grid-cols-7 gap-1 mb-2">
                                <div class="text-xs font-medium text-gray-500 text-center py-1">Su</div>
                                <div class="text-xs font-medium text-gray-500 text-center py-1">Mo</div>
                                <div class="text-xs font-medium text-gray-500 text-center py-1">Tu</div>
                                <div class="text-xs font-medium text-gray-500 text-center py-1">We</div>
                                <div class="text-xs font-medium text-gray-500 text-center py-1">Th</div>
                                <div class="text-xs font-medium text-gray-500 text-center py-1">Fr</div>
                                <div class="text-xs font-medium text-gray-500 text-center py-1">Sa</div>
                            </div>
                            <div id="calendarDays" class="grid grid-cols-7 gap-1">
                                <!-- Calendar days will be populated by JavaScript -->
                            </div>
                            
                            <!-- Quick Filters -->
                            <div class="mt-4 space-y-2">
                                <button class="w-full text-left px-3 py-2 rounded-md text-sm font-medium bg-blue-100 text-blue-700 border border-blue-200 day-filter active" data-day="today">
                                    <i class="fas fa-calendar-day mr-2"></i>Today
                                    <span class="float-right text-xs text-gray-500">@todaySchedule.Count</span>
                                </button>
                                <button class="w-full text-left px-3 py-2 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-100 day-filter" data-day="all">
                                    <i class="fas fa-calendar-week mr-2"></i>All Days
                                    <span class="float-right text-xs text-gray-500">@allSchedules.Count</span>
                                </button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Schedule Content -->
                    <div class="lg:col-span-3">
                        <!-- Today's Schedule -->
                        <div id="today-schedule" class="schedule-content">
                            <div class="mb-4">
                                <h5 class="font-medium text-gray-900">Today's Classes</h5>
                                <p class="text-sm text-gray-500">@DateTime.Now.ToString("dddd, MMMM d, yyyy")</p>
                            </div>
                            @if (todaySchedule.Count > 0)
                            {
                                <div class="space-y-4">
                                    @foreach (var scheduleItem in todaySchedule)
                                    {
                                        var bgClass = scheduleItem.Status == "ongoing" ? "bg-green-50 border-green-200" :
                                                     scheduleItem.Status == "completed" ? "bg-gray-50 border-gray-200" : "bg-blue-50 border-blue-200";
                                        var textClass = scheduleItem.Status == "ongoing" ? "text-green-600" :
                                                       scheduleItem.Status == "completed" ? "text-gray-600" : "text-blue-600";

                                        <div class="flex items-center justify-between p-4 @bgClass border rounded-lg">
                                            <div>
                                                <p class="font-medium text-gray-900">@scheduleItem.CourseName</p>
                                                <p class="text-sm text-gray-500">@scheduleItem.FacultyName</p>
                                                @if (!string.IsNullOrEmpty(scheduleItem.Room))
                                                {
                                                    <p class="text-sm text-gray-500">Room @scheduleItem.Room</p>
                                                }
                                            </div>
                                            <div class="text-right">
                                                <p class="font-medium @textClass">
                                                    @if (!string.IsNullOrEmpty(scheduleItem.StartTime))
                                                    {
                                                        @scheduleItem.StartTime
                                                        @if (!string.IsNullOrEmpty(scheduleItem.EndTime))
                                                        {
                                                            @: - @scheduleItem.EndTime
                                                        }
                                                    }
                                                    else
                                                    {
                                                        @:TBA
                                                    }
                                                </p>
                                                <p class="text-xs text-gray-500 capitalize">@scheduleItem.Status</p>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-8">
                                    <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-3">
                                        <i class="fas fa-calendar-day text-gray-400 text-2xl"></i>
                                    </div>
                                    <p class="text-gray-500 text-sm">No classes scheduled for today</p>
                                </div>
                            }
                        </div>
                        
                        <!-- Selected Date Schedule (Hidden by default) -->
                        <div id="selected-date-schedule" class="schedule-content hidden">
                            <div class="mb-4">
                                <h5 id="selectedDateTitle" class="font-medium text-gray-900">Selected Date</h5>
                                <p id="selectedDateSubtitle" class="text-sm text-gray-500"></p>
                            </div>
                            <div id="selectedDateContent">
                                <!-- Content will be populated by JavaScript -->
                            </div>
                        </div>
                        
                        <!-- Weekly Schedule (Hidden by default) -->
                        @foreach (var day in daysOfWeek)
                        {
                            var daySchedules = allSchedules.Where(s => s.DayOfWeek.Equals(day, StringComparison.OrdinalIgnoreCase)).ToList();
                            <div id="@day.ToLower()-schedule" class="schedule-content hidden">
                                <div class="mb-4">
                                    <h5 class="font-medium text-gray-900">@day Classes</h5>
                                </div>
                                @if (daySchedules.Any())
                                {
                                    <div class="space-y-4">
                                        @foreach (var scheduleItem in daySchedules)
                                        {
                                            <div class="flex items-center justify-between p-4 bg-gray-50 border border-gray-200 rounded-lg">
                                                <div>
                                                    <p class="font-medium text-gray-900">@scheduleItem.CourseName</p>
                                                    <p class="text-sm text-gray-500">@scheduleItem.FacultyName</p>
                                                    @if (!string.IsNullOrEmpty(scheduleItem.Room))
                                                    {
                                                        <p class="text-sm text-gray-500">Room @scheduleItem.Room</p>
                                                    }
                                                </div>
                                                <div class="text-right">
                                                    <p class="font-medium text-gray-700">
                                                        @if (!string.IsNullOrEmpty(scheduleItem.StartTime))
                                                        {
                                                            @scheduleItem.StartTime
                                                            @if (!string.IsNullOrEmpty(scheduleItem.EndTime))
                                                            {
                                                                @: - @scheduleItem.EndTime
                                                            }
                                                        }
                                                        else
                                                        {
                                                            @:TBA
                                                        }
                                                    </p>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center py-8">
                                        <p class="text-gray-500 text-sm">No classes scheduled for @day</p>
                                    </div>
                                }
                            </div>
                        }
                        
                        <!-- All Schedule -->
                        <div id="all-schedule" class="schedule-content hidden">
                            <div class="mb-4">
                                <h5 class="font-medium text-gray-900">All Classes</h5>
                                <p class="text-sm text-gray-500">Complete weekly schedule</p>
                            </div>
                            @if (allSchedules.Any())
                            {
                                <div class="space-y-6">
                                    @foreach (var dayGroup in allSchedules.GroupBy(s => s.DayOfWeek).OrderBy(g => Array.IndexOf(daysOfWeek, g.Key)))
                                    {
                                        <div>
                                            <h6 class="font-medium text-gray-800 mb-3">@dayGroup.Key</h6>
                                            <div class="space-y-3">
                                                @foreach (var scheduleItem in dayGroup.OrderBy(s => s.StartTime))
                                                {
                                                    <div class="flex items-center justify-between p-3 bg-gray-50 border border-gray-200 rounded-lg">
                                                        <div>
                                                            <p class="font-medium text-gray-900">@scheduleItem.CourseName</p>
                                                            <p class="text-sm text-gray-500">@scheduleItem.FacultyName</p>
                                                        </div>
                                                        <div class="text-right">
                                                            <p class="font-medium text-gray-700">
                                                                @if (!string.IsNullOrEmpty(scheduleItem.StartTime))
                                                                {
                                                                    @scheduleItem.StartTime
                                                                    @if (!string.IsNullOrEmpty(scheduleItem.EndTime))
                                                                    {
                                                                        @: - @scheduleItem.EndTime
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    @:TBA
                                                                }
                                                            </p>
                                                            @if (!string.IsNullOrEmpty(scheduleItem.Room))
                                                            {
                                                                <p class="text-xs text-gray-500">Room @scheduleItem.Room</p>
                                                            }
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-8">
                                    <p class="text-gray-500 text-sm">No classes scheduled</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            else if (ViewBag.HasDashboardData == false && !string.IsNullOrEmpty(ViewBag.DashboardError?.ToString()))
            {
                <div class="text-center py-4">
                    <p class="text-gray-500 text-sm">Unable to load schedule: @ViewBag.DashboardError</p>
                </div>
            }
            else
            {
                <div class="space-y-4">
                    <div class="flex items-center justify-between p-4 bg-blue-50 rounded-lg">
                        <div>
                            <p class="font-medium text-gray-900">Database Systems</p>
                            <p class="text-sm text-gray-500">Room 203</p>
                        </div>
                        <div class="text-right">
                            <p class="font-medium text-blue-600">2:00 PM</p>
                            <p class="text-xs text-gray-500">Today</p>
                        </div>
                    </div>
                    <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                        <div>
                            <p class="font-medium text-gray-900">Web Development</p>
                            <p class="text-sm text-gray-500">Room 105</p>
                        </div>
                        <div class="text-right">
                            <p class="font-medium text-gray-600">10:00 AM</p>
                            <p class="text-xs text-gray-500">Tomorrow</p>
                        </div>
                    </div>
                    <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                        <div>
                            <p class="font-medium text-gray-900">Software Engineering</p>
                            <p class="text-sm text-gray-500">Room 301</p>
                        </div>
                        <div class="text-right">
                            <p class="font-medium text-gray-600">3:00 PM</p>
                            <p class="text-xs text-gray-500">Tomorrow</p>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/OnboardingModal.js"></script>
    <style>
        /* Animation classes for schedule components */
        .schedule-card-enter {
            opacity: 0;
            transform: translateY(10px);
            transition: all 0.3s ease-out;
        }
        
        .schedule-card-enter-active {
            opacity: 1;
            transform: translateY(0);
        }
        
        .schedule-content {
            opacity: 0;
            transform: translateX(20px);
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .schedule-content:not(.hidden) {
            opacity: 1;
            transform: translateX(0);
        }
        
        .calendar-day {
            transition: all 0.2s ease-in-out;
            transform: scale(1);
        }
        
        .calendar-day:hover {
            transform: scale(1.05);
            background-color: #e5e7eb;
        }
        
        .calendar-day.selected {
            animation: pulse 0.3s ease-in-out;
        }
        
        .calendar-day.today-date.selected {
            box-shadow: 0 0 0 2px white;
        }
        
        .calendar-day.selected:not(.today-date) {
            box-shadow: 0 0 0 2px #3b82f6;
        }
        
        .filter-button {
            transition: all 0.3s ease-in-out;
            transform: translateX(0);
        }
        
        .filter-button:hover {
            transform: translateX(3px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .filter-button.active {
            animation: slideIn 0.3s ease-out;
        }
        
        .schedule-item {
            opacity: 0;
            transform: translateY(15px);
            animation: fadeInUp 0.5s ease-out forwards;
        }
        
        .schedule-item:nth-child(1) { animation-delay: 0.1s; }
        .schedule-item:nth-child(2) { animation-delay: 0.2s; }
        .schedule-item:nth-child(3) { animation-delay: 0.3s; }
        .schedule-item:nth-child(4) { animation-delay: 0.4s; }
        .schedule-item:nth-child(5) { animation-delay: 0.5s; }
        
        .calendar-nav {
            transition: all 0.2s ease-in-out;
        }
        
        .calendar-nav:hover {
            background-color: #d1d5db;
            transform: scale(1.1);
        }
        
        .calendar-nav:active {
            transform: scale(0.95);
        }
        
        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(15px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        @@keyframes slideIn {
            from {
                transform: translateX(-10px);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }
        
        @@keyframes pulse {
            0% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.05);
            }
            100% {
                transform: scale(1);
            }
        }
        
        .loading-shimmer {
            background: linear-gradient(90deg, #f3f4f6 25%, #e5e7eb 50%, #f3f4f6 75%);
            background-size: 200% 100%;
            animation: shimmer 1.5s infinite;
        }
        
        @@keyframes shimmer {
            0% {
                background-position: -200% 0;
            }
            100% {
                background-position: 200% 0;
            }
        }
        
        .fade-transition {
            transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
        }
        
        .slide-up {
            animation: slideUp 0.4s ease-out;
        }
        
        @@keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
    <script>
        // Global variables for calendar and schedule data
        let currentDate = new Date();
        let selectedDate = new Date();
        let allSchedulesData = @Html.Raw(Json.Serialize(allSchedules));
        
        // Check if onboarding modal should be shown
        document.addEventListener('DOMContentLoaded', function() {
            const showOnboardingAlert = @(ViewBag.ShowOnboardingAlert?.ToString().ToLower() ?? "false");
            console.log('ShowOnboardingAlert value:', showOnboardingAlert);
            
            if (showOnboardingAlert === true) {
                console.log('Attempting to show onboarding modal...');
                
                // Ensure the function is available
                if (typeof window.showOnboardingModal === 'function') {
                    setTimeout(() => {
                        window.showOnboardingModal();
                    }, 500); // Small delay to ensure everything is loaded
                } else {
                    console.error('showOnboardingModal function not found');
                    console.log('Available functions:', Object.keys(window).filter(key => key.includes('onboard')));
                }
            } else {
                console.log('Onboarding modal not needed');
            }

            // Initialize calendar with animations
            initializeCalendar();
            
            // Add animation classes to existing elements
            addInitialAnimations();
        });

        function addInitialAnimations() {
            // Add animation classes to filter buttons
            document.querySelectorAll('.day-filter').forEach(btn => {
                btn.classList.add('filter-button');
            });
            
            // Add animation classes to schedule items
            document.querySelectorAll('.schedule-content > div > div').forEach((item, index) => {
                if (item.classList.contains('space-y-4') || item.classList.contains('space-y-6')) {
                    item.children.forEach((scheduleItem, itemIndex) => {
                        scheduleItem.classList.add('schedule-item');
                        scheduleItem.style.animationDelay = `${itemIndex * 0.1}s`;
                    });
                }
            });
        }

        // Calendar functionality with animations
        function initializeCalendar() {
            updateCalendarDisplay();
            setupCalendarEventListeners();
            setupScheduleFilters();
        }

        function updateCalendarDisplay() {
            const monthNames = ["January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"];
            
            const monthElement = document.getElementById('currentMonth');
            monthElement.style.opacity = '0';
            
            setTimeout(() => {
                monthElement.textContent = monthNames[currentDate.getMonth()] + ' ' + currentDate.getFullYear();
                monthElement.style.opacity = '1';
                monthElement.style.transition = 'opacity 0.3s ease-in-out';
            }, 150);
            
            generateCalendarDays();
        }

        function generateCalendarDays() {
            const calendarDays = document.getElementById('calendarDays');
            
            // Fade out current calendar
            calendarDays.style.opacity = '0';
            calendarDays.style.transform = 'scale(0.95)';
            
            setTimeout(() => {
                calendarDays.innerHTML = '';
                
                const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
                const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
                const startDate = new Date(firstDay);
                startDate.setDate(startDate.getDate() - firstDay.getDay());
                
                const today = new Date();
                const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
                
                for (let i = 0; i < 42; i++) {
                    const day = new Date(startDate);
                    day.setDate(startDate.getDate() + i);
                    
                    const dayElement = document.createElement('button');
                    dayElement.className = 'aspect-square text-sm p-1 rounded hover:bg-gray-200 relative calendar-day';
                    dayElement.textContent = day.getDate();
                    
                    // Check if day has schedules
                    const dayName = dayNames[day.getDay()];
                    const hasSchedule = allSchedulesData.some(schedule => 
                        schedule.dayOfWeek.toLowerCase() === dayName.toLowerCase()
                    );
                    
                    // Style current month days
                    if (day.getMonth() === currentDate.getMonth()) {
                        dayElement.classList.add('text-gray-900');
                        
                        // Highlight today with special handling
                        if (day.toDateString() === today.toDateString()) {
                            dayElement.classList.add('bg-blue-500', 'text-white', 'font-semibold', 'today-date');
                            dayElement.classList.remove('hover:bg-gray-200');
                            // Use white ring for today to be visible against blue background
                            dayElement.style.setProperty('--ring-color', 'white');
                        }
                    } else {
                        dayElement.classList.add('text-gray-400');
                    }
                    
                    // Add click handler with animation
                    dayElement.addEventListener('click', (e) => selectDateWithAnimation(day, dayName, dayElement, e));
                    
                    // Add entrance animation
                    dayElement.style.opacity = '0';
                    dayElement.style.transform = 'scale(0.8)';
                    
                    calendarDays.appendChild(dayElement);
                    
                    // Animate day entrance
                    setTimeout(() => {
                        dayElement.style.transition = 'all 0.2s ease-out';
                        dayElement.style.opacity = '1';
                        dayElement.style.transform = 'scale(1)';
                    }, i * 20);
                }
                
                // Fade in new calendar
                setTimeout(() => {
                    calendarDays.style.transition = 'all 0.3s ease-in-out';
                    calendarDays.style.opacity = '1';
                    calendarDays.style.transform = 'scale(1)';
                }, 100);
            }, 200);
        }

        function selectDateWithAnimation(date, dayName, dayElement, event) {
            selectedDate = date;
            const today = new Date();
            
            // Check if selected date is today
            if (date.toDateString() === today.toDateString()) {
                // If clicking on today's date, treat it like clicking the "Today" button
                updateFilterButtonsWithAnimation('today');
                showScheduleContentWithAnimation('today');
                
                // Remove selection rings from all calendar days since we're showing "today" view
                document.querySelectorAll('#calendarDays button').forEach(btn => {
                    btn.classList.remove('ring-2', 'ring-blue-500', 'ring-white', 'selected');
                    btn.style.removeProperty('--ring-color');
                });
                
                return; // Exit early, don't show selected-date view
            }
            
            // For other dates, proceed with normal selection logic
            document.querySelectorAll('#calendarDays button').forEach(btn => {
                btn.classList.remove('ring-2', 'ring-blue-500', 'selected');
                btn.style.removeProperty('--ring-color');
            });
            
            // Add selection ring with blue color for non-today dates
            dayElement.classList.add('ring-2', 'selected', 'ring-blue-500');
            
            // Show schedules for selected date with animation
            showScheduleForDateWithAnimation(date, dayName);
            
            // Update filter buttons with animation
            updateFilterButtonsWithAnimation('selected-date');
        }

        function showScheduleForDateWithAnimation(date, dayName) {
            const schedules = allSchedulesData.filter(schedule => 
                schedule.dayOfWeek.toLowerCase() === dayName.toLowerCase()
            );
            
            const titleElement = document.getElementById('selectedDateTitle');
            const subtitleElement = document.getElementById('selectedDateSubtitle');
            const contentElement = document.getElementById('selectedDateContent');
            
            // Animate title change
            titleElement.style.opacity = '0';
            subtitleElement.style.opacity = '0';
            
            setTimeout(() => {
                titleElement.textContent = dayName + ' Classes';
                subtitleElement.textContent = date.toLocaleDateString('en-US', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                });
                
                titleElement.style.transition = 'opacity 0.3s ease-in-out';
                subtitleElement.style.transition = 'opacity 0.3s ease-in-out';
                titleElement.style.opacity = '1';
                subtitleElement.style.opacity = '1';
            }, 150);
            
            // Animate content change
            contentElement.style.opacity = '0';
            contentElement.style.transform = 'translateY(10px)';
            
            setTimeout(() => {
                if (schedules.length > 0) {
                    contentElement.innerHTML = schedules.map((schedule, index) => `
                        <div class="flex items-center justify-between p-4 bg-gray-50 border border-gray-200 rounded-lg mb-3 schedule-item" style="animation-delay: ${index * 0.1}s;">
                            <div>
                                <p class="font-medium text-gray-900">${schedule.courseName}</p>
                                <p class="text-sm text-gray-500">${schedule.facultyName}</p>
                                ${schedule.room ? `<p class="text-sm text-gray-500">Room ${schedule.room}</p>` : ''}
                            </div>
                            <div class="text-right">
                                <p class="font-medium text-gray-700">
                                    ${schedule.startTime || 'TBA'}${schedule.endTime ? ' - ' + schedule.endTime : ''}
                                </p>
                            </div>
                        </div>
                    `).join('');
                } else {
                    contentElement.innerHTML = `
                        <div class="text-center py-8 slide-up">
                            <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-3">
                                <i class="fas fa-calendar-times text-gray-400 text-2xl"></i>
                            </div>
                            <p class="text-gray-500 text-sm">No classes scheduled for this day</p>
                        </div>
                    `;
                }
                
                contentElement.style.transition = 'all 0.4s ease-out';
                contentElement.style.opacity = '1';
                contentElement.style.transform = 'translateY(0)';
            }, 200);
            
            // Show selected date schedule with animation
            showScheduleContentWithAnimation('selected-date');
        }

        function setupCalendarEventListeners() {
            const prevBtn = document.getElementById('prevMonth');
            const nextBtn = document.getElementById('nextMonth');
            
            prevBtn.classList.add('calendar-nav');
            nextBtn.classList.add('calendar-nav');
            
            prevBtn.addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() - 1);
                updateCalendarDisplay();
            });
            
            nextBtn.addEventListener('click', () => {
                currentDate.setMonth(currentDate.getMonth() + 1);
                updateCalendarDisplay();
            });
        }

        function setupScheduleFilters() {
            const dayFilters = document.querySelectorAll('.day-filter');

            dayFilters.forEach(filter => {
                filter.addEventListener('click', function() {
                    const selectedDay = this.getAttribute('data-day');
                    updateFilterButtonsWithAnimation(selectedDay);
                    showScheduleContentWithAnimation(selectedDay);
                });
            });
        }

        function updateFilterButtonsWithAnimation(selectedDay) {
            const dayFilters = document.querySelectorAll('.day-filter');
            
            dayFilters.forEach(f => {
                f.classList.remove('active', 'bg-blue-100', 'text-blue-700', 'border-blue-200');
                f.classList.add('text-gray-700', 'hover:bg-gray-100');
                f.style.transform = 'translateX(0)';
            });
            
            const activeFilter = document.querySelector(`[data-day="${selectedDay}"]`);
            if (activeFilter) {
                activeFilter.classList.remove('text-gray-700', 'hover:bg-gray-100');
                activeFilter.classList.add('active', 'bg-blue-100', 'text-blue-700', 'border-blue-200');
            }
        }

        function showScheduleContentWithAnimation(selectedDay) {
            // Fade out all content
            document.querySelectorAll('.schedule-content').forEach(content => {
                content.style.opacity = '0';
                content.style.transform = 'translateX(20px)';
                
                setTimeout(() => {
                    content.classList.add('hidden');
                }, 200);
            });
            
            // Show target content with animation
            setTimeout(() => {
                let targetContent;
                if (selectedDay === 'today') {
                    targetContent = document.getElementById('today-schedule');
                } else if (selectedDay === 'all') {
                    targetContent = document.getElementById('all-schedule');
                } else if (selectedDay === 'selected-date') {
                    targetContent = document.getElementById('selected-date-schedule');
                } else {
                    targetContent = document.getElementById(selectedDay + '-schedule');
                }
                
                if (targetContent) {
                    targetContent.classList.remove('hidden');
                    
                    // Add staggered animation to schedule items
                    const scheduleItems = targetContent.querySelectorAll('.space-y-4 > div, .space-y-6 > div, .space-y-3 > div');
                    scheduleItems.forEach((item, index) => {
                        item.style.opacity = '0';
                        item.style.transform = 'translateY(15px)';
                        item.style.transition = 'all 0.3s ease-out';
                        
                        setTimeout(() => {
                            item.style.opacity = '1';
                            item.style.transform = 'translateY(0)';
                        }, index * 100);
                    });
                    
                    setTimeout(() => {
                        targetContent.style.opacity = '1';
                        targetContent.style.transform = 'translateX(0)';
                    }, 50);
                }
            }, 250);
        }
    </script>
}
