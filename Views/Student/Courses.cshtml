@model AttendanceApp_ASPNET.Services.CourseDataResult
@{
    ViewData["Title"] = "My Courses";
}

<div class="courses-page">
    <!-- Error Message Display -->
    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <div class="mb-6 bg-red-50 border border-red-200 rounded-lg p-4 dashboard-card-entrance">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="fas fa-exclamation-circle text-red-400"></i>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-red-600">@ViewBag.ErrorMessage</p>
                </div>
            </div>
        </div>
    }

    <!-- Page Header -->
    <div class="mb-8">
        <div class="flex items-center justify-between">
            <div>
                <h1 class="text-3xl font-bold text-gray-900 dashboard-card-entrance">My Courses</h1>
                <p class="text-gray-600 mt-2 dashboard-card-entrance">Manage your enrolled courses and track attendance</p>
            </div>
            <div class="text-right dashboard-card-entrance">
                <div class="text-sm text-gray-500">Academic Year 2024-2025</div>
                <div class="text-sm text-blue-600 font-medium">
                    @{
                        var sectionName = ViewBag.StudentInfo?.SectionName ?? "No Section Assigned";
                    }
                    @sectionName
                </div>
            </div>
        </div>
    </div>

    @if (Model?.Success == true)
    {
        <!-- Graduation Status Alert -->
        @if (Model.StudentInfo?.IsGraduated == true)
        {
            <div class="mb-6 bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-lg p-4 dashboard-card-entrance">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-graduation-cap text-green-500 text-xl"></i>
                    </div>
                    <div class="ml-3">
                        <h4 class="text-lg font-medium text-green-800">Congratulations! ðŸŽ“</h4>
                        <p class="text-sm text-green-700 mt-1">
                            You have graduated from your program. Below you can view your complete academic history and course records.
                        </p>
                    </div>
                </div>
            </div>
        }

        <!-- Current Academic Year Courses Container -->
        @if (!Model.StudentInfo?.IsGraduated == true && Model.CurrentCourses.Any())
        {
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-8 dashboard-card-entrance">
                <div class="p-6 border-b border-gray-200">
                    <div class="flex items-center justify-between">
                        <div>
                            <h2 class="text-xl font-semibold text-gray-900">Current Academic Year @(Model.StudentInfo?.CurrentAcademicYear ?? "2024-2025")</h2>
                            <p class="text-sm text-gray-600 mt-1">Your enrolled courses for this academic year</p>
                        </div>
                        <div class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                            @Model.TotalCurrent Course@(Model.TotalCurrent != 1 ? "s" : "")
                        </div>
                    </div>
                </div>

                <!-- Semester Tabs with Dynamic Data and Flexible Matching -->
                @{
                    // Create a more flexible semester grouping for current courses only
                    var currentCoursesBySemester = new Dictionary<string, List<AttendanceApp_ASPNET.Services.CourseInfo>>();
                    
                    foreach (var course in Model.CurrentCourses.Where(c => c.CourseType == "current"))
                    {
                        var semester = course.Semester?.ToLower().Trim() ?? "";
                        string normalizedSemester;
                        
                        // Normalize semester names to match our tab structure
                        if (semester.Contains("1st") || semester.Contains("first") || semester == "1")
                            normalizedSemester = "1st";
                        else if (semester.Contains("2nd") || semester.Contains("second") || semester == "2")
                            normalizedSemester = "2nd";
                        else if (semester.Contains("3rd") || semester.Contains("third") || semester == "3")
                            normalizedSemester = "3rd";
                        else if (semester.Contains("summer") || semester.Contains("mid") || semester.Contains("mid-year"))
                            normalizedSemester = "Summer";
                        else
                            normalizedSemester = "1st"; // Default fallback
                        
                        if (!currentCoursesBySemester.ContainsKey(normalizedSemester))
                            currentCoursesBySemester[normalizedSemester] = new List<AttendanceApp_ASPNET.Services.CourseInfo>();
                        
                        currentCoursesBySemester[normalizedSemester].Add(course);
                    }
                    
                    var semesters = new[] { "1st", "2nd", "3rd", "Summer" };
                }

                <div class="border-b border-gray-200">
                    <nav class="flex space-x-8 px-6" aria-label="Semester Tabs">
                        @foreach (var semester in semesters)
                        {
                            var courses = currentCoursesBySemester.ContainsKey(semester) ? currentCoursesBySemester[semester] : new List<AttendanceApp_ASPNET.Services.CourseInfo>();
                            var isFirst = semester == semesters.First();
                            
                            <button onclick="showSemester('@semester')" id="tab-@semester" class="semester-tab @(isFirst ? "active-tab border-b-2 border-blue-500 text-blue-600" : "border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300") py-4 px-1 text-sm font-medium transition-all duration-200">
                                @semester Semester
                                <span class="ml-2 @(isFirst ? "bg-blue-100 text-blue-600" : "bg-gray-100 text-gray-600") text-xs px-2 py-0.5 rounded-full">@courses.Count</span>
                            </button>
                        }
                    </nav>
                </div>

                <!-- Semester Content -->
                <div class="p-6">
                    @foreach (var semester in semesters)
                    {
                        var courses = currentCoursesBySemester.ContainsKey(semester) ? currentCoursesBySemester[semester] : new List<AttendanceApp_ASPNET.Services.CourseInfo>();
                        var isFirst = semester == semesters.First();
                        
                        <div id="content-@semester" class="semester-content @(isFirst ? "" : "hidden")">
                            @if (courses.Any())
                            {
                                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                    @foreach (var course in courses)
                                    {
                                        <div class="course-card bg-gray-50 rounded-lg p-4 border border-gray-200 hover:shadow-lg hover:border-blue-300 transition-all duration-300 cursor-pointer transform hover:scale-105" onclick="openCourse(@course.CourseId, '@Html.Raw(Html.Encode(course.CourseName))')">
                                            <div class="flex items-start justify-between mb-3">
                                                <div>
                                                    <h3 class="font-semibold text-gray-900 hover:text-blue-600 transition-colors">@course.CourseName</h3>
                                                    <p class="text-sm text-blue-600 font-medium">@course.CourseCode</p>
                                                </div>
                                                <div class="flex items-center space-x-2">
                                                    <span class="@GetStatusBadgeClass(course.EnrollmentStatus) text-xs font-medium px-2 py-1 rounded">
                                                        @GetStatusDisplayText(course.EnrollmentStatus)
                                                    </span>
                                                    <i class="fas fa-arrow-right text-gray-400 text-sm hover:text-blue-500 transition-colors"></i>
                                                </div>
                                            </div>
                                            <p class="text-sm text-gray-600 mb-3">@course.CourseDescription</p>
                                            <div class="flex items-center justify-between text-sm text-gray-500">
                                                <span><i class="fas fa-user-tie mr-1"></i>@course.FacultyName</span>
                                                <span><i class="fas fa-door-open mr-1"></i>@(!string.IsNullOrEmpty(course.Room) ? course.Room : "TBA")</span>
                                            </div>
                                            <div class="mt-2 text-xs text-gray-500">
                                                <span>@course.Semester â€¢ @course.AcademicYear</span>
                                            </div>
                                            <!-- Click indicator -->
                                            <div class="mt-3 flex items-center justify-center text-xs text-gray-500 opacity-75">
                                                <i class="fas fa-mouse-pointer mr-1"></i>
                                                <span>Click to view details</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-12">
                                    <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                        <i class="fas fa-@(semester == "Summer" ? "sun" : "calendar-alt") text-gray-400 text-xl"></i>
                                    </div>
                                    <h3 class="text-lg font-medium text-gray-900 mb-2">@semester Semester</h3>
                                    <p class="text-gray-600">No courses enrolled for @semester.ToLower() semester.</p>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
        else if (!Model.StudentInfo?.IsGraduated == true)
        {
            <!-- No Current Courses State for Active Students -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-8 dashboard-card-entrance">
                <div class="p-6 text-center">
                    <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <i class="fas fa-book-open text-blue-500 text-xl"></i>
                    </div>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">No Current Courses</h3>
                    <p class="text-gray-600 mb-4">You are not currently enrolled in any courses for the current academic year.</p>
                </div>
            </div>
        }

        <!-- Academic History Container -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 dashboard-card-entrance">
            <div class="p-6 border-b border-gray-200">
                <div class="flex items-center justify-between">
                    <div>
                        <h2 class="text-xl font-semibold text-gray-900">
                            @if (Model.StudentInfo?.IsGraduated == true)
                            {
                                @:Complete Academic History
                            }
                            else if (Model.CurrentCourses.Any())
                            {
                                @:Previous Academic Years
                            }
                            else
                            {
                                @:Academic History
                            }
                        </h2>
                        <p class="text-sm text-gray-600 mt-1">
                            @if (Model.StudentInfo?.IsGraduated == true)
                            {
                                @($"Your complete academic journey from {Model.StudentInfo?.StudentEnrollmentYear} onwards")
                            }
                            else if (Model.CurrentCourses.Any())
                            {
                                @($"Your completed courses from previous academic years")
                            }
                            else
                            {
                                @($"Your academic history and course records")
                            }
                        </p>
                    </div>
                    @if (Model.PreviousCourses.Any())
                    {
                        <div class="flex flex-col items-end space-y-2">
                            <!-- Total Previous Courses Badge -->
                            <div class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                                @Model.TotalPrevious Course@(Model.TotalPrevious != 1 ? "s" : "")
                            </div>
                            
                            <!-- Course Filter -->
                            <div class="relative">
                                <select id="academicYearFilter" class="appearance-none bg-white border border-gray-300 rounded-lg px-3 py-2 pr-8 text-sm font-medium text-gray-700 hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 cursor-pointer shadow-sm min-w-[150px]">
                                    @if (Model.StudentInfo?.IsGraduated == true || !Model.CurrentCourses.Any())
                                    {
                                        <option value="">All Academic Years</option>
                                    }
                                    else
                                    {
                                        <option value="">All Previous Years</option>
                                    }
                                    @{
                                        var allYears = Model.PreviousCourses.Select(c => c.AcademicYear).Distinct().OrderByDescending(y => y);
                                    }
                                    @foreach (var year in allYears)
                                    {
                                        <option value="@year">@year</option>
                                    }
                                </select>
                                <!-- Custom dropdown arrow -->
                                <div class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
                                    <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                    </svg>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Academic History Content -->
            <div class="p-6" id="previousCoursesContent">
                @if (Model.PreviousCourses.Any())
                {
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6" id="previousCoursesList">
                        @foreach (var course in Model.PreviousCourses)
                        {
                            <div class="course-card bg-gradient-to-br from-gray-50 to-gray-100 rounded-lg p-4 border border-gray-200 hover:shadow-lg hover:border-blue-300 transition-all duration-300 cursor-pointer transform hover:scale-105" 
                                 data-academic-year="@course.AcademicYear" 
                                 onclick="openCourse(@course.CourseId, '@Html.Raw(Html.Encode(course.CourseName))')">
                                <div class="flex items-start justify-between mb-3">
                                    <div>
                                        <h3 class="font-semibold text-gray-900 hover:text-blue-600 transition-colors">@course.CourseName</h3>
                                        <p class="text-sm text-blue-600 font-medium">@course.CourseCode</p>
                                    </div>
                                    <div class="flex items-center space-x-2">
                                        <span class="@GetStatusBadgeClass(course.EnrollmentStatus) text-xs font-medium px-2.5 py-1 rounded-full">
                                            @GetStatusDisplayText(course.EnrollmentStatus)
                                        </span>
                                        <i class="fas fa-arrow-right text-gray-400 text-sm hover:text-blue-500 transition-colors"></i>
                                    </div>
                                </div>
                                <p class="text-sm text-gray-600 mb-3">@course.CourseDescription</p>
                                <div class="flex items-center justify-between text-sm text-gray-500 mb-3">
                                    <span><i class="fas fa-user-tie mr-1"></i>@course.FacultyName</span>
                                    <span class="font-medium text-blue-600"><i class="fas fa-calendar mr-1"></i>@course.AcademicYear</span>
                                </div>
                                <div class="text-xs text-gray-500 mb-2">
                                    <span>@course.Semester â€¢ Room: @(!string.IsNullOrEmpty(course.Room) ? course.Room : "TBA")</span>
                                </div>
                                @if (!string.IsNullOrEmpty(course.RejectionReason))
                                {
                                    <div class="text-xs text-red-600 bg-red-50 rounded px-2 py-1 mb-2">
                                        <i class="fas fa-info-circle mr-1"></i>@course.RejectionReason
                                    </div>
                                }
                                <!-- Click indicator -->
                                <div class="mt-3 flex items-center justify-center text-xs text-gray-500 opacity-75">
                                    <i class="fas fa-mouse-pointer mr-1"></i>
                                    <span>Click to view details</span>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-12">
                        <div class="w-16 h-16 bg-gradient-to-br from-blue-100 to-indigo-100 rounded-full flex items-center justify-center mx-auto mb-4">
                            <i class="fas fa-history text-blue-500 text-xl"></i>
                        </div>
                        <h3 class="text-lg font-medium text-gray-900 mb-2">No Academic History</h3>
                        <p class="text-gray-600">No courses found from previous academic years.</p>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <!-- Enhanced Error State -->
        <div class="text-center py-12 dashboard-card-entrance">
            <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <i class="fas fa-exclamation-triangle text-red-500 text-xl"></i>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">Unable to Load Courses</h3>
            <p class="text-gray-600 mb-4">@(Model?.Message ?? "There was an error loading your courses.")</p>
            
            @if (Model?.Message?.Contains("connect") == true || Model?.Message?.Contains("timeout") == true || Model?.Message?.Contains("server") == true)
            {
                <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4 max-w-md mx-auto">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <i class="fas fa-info-circle text-yellow-400"></i>
                        </div>
                        <div class="ml-3 text-left">
                            <h4 class="text-sm font-medium text-yellow-800">Connection Issue</h4>
                            <p class="text-sm text-yellow-700 mt-1">
                                Make sure the Python API server is running on <code class="bg-yellow-100 px-1 rounded">http://localhost:8000</code>
                            </p>
                        </div>
                    </div>
                </div>
            }
            
            <div class="flex justify-center space-x-3">
                <button onclick="window.location.reload()" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors">
                    <i class="fas fa-refresh mr-2"></i>Retry
                </button>
                <button onclick="window.location.href='/Student/Dashboard'" class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition-colors">
                    <i class="fas fa-home mr-2"></i>Back to Dashboard
                </button>
            </div>
            
            @if (Model?.Message?.Contains("connect") == true || Model?.Message?.Contains("timeout") == true)
            {
                <div class="mt-6 text-xs text-gray-500">
                    <p>Troubleshooting steps:</p>
                    <ul class="text-left max-w-md mx-auto mt-2 space-y-1">
                        <li>â€¢ Check if the Python API is running</li>
                        <li>â€¢ Verify the API URL in settings</li>
                        <li>â€¢ Check your internet connection</li>
                        <li>â€¢ Try refreshing the page</li>
                    </ul>
                </div>
            }
        </div>
    }
</div>

@functions {
    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "approved" => "bg-green-100 text-green-800",
            "pending" => "bg-yellow-100 text-yellow-800",
            "rejected" => "bg-red-100 text-red-800",
            "not_enrolled" => "bg-gray-100 text-gray-800",
            "attended_without_enrollment" => "bg-blue-100 text-blue-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private string GetStatusDisplayText(string status)
    {
        return status switch
        {
            "approved" => "Enrolled",
            "pending" => "Pending",
            "rejected" => "Rejected",
            "not_enrolled" => "Not Enrolled",
            "attended_without_enrollment" => "Attended",
            _ => FormatStatusText(status)
        };
    }

    private string FormatStatusText(string status)
    {
        if (string.IsNullOrEmpty(status))
            return "Unknown";

        // Replace underscores with spaces and capitalize first letter of each word
        var words = status.Replace("_", " ").Split(' ');
        var result = new System.Text.StringBuilder();
        
        foreach (var word in words)
        {
            if (!string.IsNullOrEmpty(word))
            {
                result.Append(char.ToUpper(word[0]));
                if (word.Length > 1)
                {
                    result.Append(word.Substring(1).ToLower());
                }
                result.Append(" ");
            }
        }
        
        return result.ToString().Trim();
    }
}

<style>
    .semester-tab {
        transition: all 0.2s ease-in-out;
    }
    
    .active-tab {
        color: #2563eb !important;
        border-color: #2563eb !important;
    }
    
    .semester-content {
        animation: fadeIn 0.3s ease-in-out;
    }
    
    .course-card {
        position: relative;
        overflow: hidden;
    }
    
    .course-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.5s;
    }
    
    .course-card:hover::before {
        left: 100%;
    }
    
    .course-card:hover {
        box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }
    
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
</style>

<script>
    // Semester tab functionality
    function showSemester(semester) {
        // Hide all semester content
        document.querySelectorAll('.semester-content').forEach(content => {
            content.classList.add('hidden');
        });
        
        // Remove active class from all tabs
        document.querySelectorAll('.semester-tab').forEach(tab => {
            tab.classList.remove('active-tab');
            tab.classList.add('border-transparent', 'text-gray-500');
            tab.classList.remove('border-blue-500', 'text-blue-600');
        });
        
        // Show selected semester content
        document.getElementById(`content-${semester}`).classList.remove('hidden');
        
        // Add active class to selected tab
        const activeTab = document.getElementById(`tab-${semester}`);
        activeTab.classList.add('active-tab');
        activeTab.classList.remove('border-transparent', 'text-gray-500');
        activeTab.classList.add('border-blue-500', 'text-blue-600');
        
        console.log(`Switched to ${semester} semester`);
    }

    // Previous courses filter functionality
    function filterPreviousCourses() {
        const selectedYear = document.getElementById('academicYearFilter').value;
        const courseCards = document.querySelectorAll('#previousCoursesList .course-card');
        
        courseCards.forEach(card => {
            const cardYear = card.getAttribute('data-academic-year');
            if (!selectedYear || cardYear === selectedYear) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
        
        console.log(`Filtering courses for academic year: ${selectedYear || 'All'}`);
    }

    // Clear academic year filter
    function clearAcademicYearFilter() {
        const academicYearFilter = document.getElementById('academicYearFilter');
        
        if (academicYearFilter) {
            academicYearFilter.value = '';
        }
        
        filterPreviousCourses();
    }

    // Add entrance animations
    document.addEventListener('DOMContentLoaded', function() {
        const cards = document.querySelectorAll('.dashboard-card-entrance');
        cards.forEach((card, index) => {
            card.style.animationDelay = `${index * 0.1}s`;
        });
        
        // Initialize with first available semester
        const firstTab = document.querySelector('.semester-tab');
        if (firstTab) {
            const semester = firstTab.id.replace('tab-', '');
            showSemester(semester);
        }
        
        // Auto-filter when dropdown changes
        const yearFilter = document.getElementById('academicYearFilter');
        if (yearFilter) {
            yearFilter.addEventListener('change', filterPreviousCourses);
        }
        
        // Make course cards focusable for accessibility
        const courseCards = document.querySelectorAll('.course-card');
        courseCards.forEach(card => {
            card.setAttribute('tabindex', '0');
            card.setAttribute('role', 'button');
            card.setAttribute('aria-label', 'View course details');
        });
        
        console.log('Courses page loaded successfully!');
    });

    // Add keyboard navigation support
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
            const focusedElement = document.activeElement;
            if (focusedElement.classList.contains('course-card')) {
                e.preventDefault();
                focusedElement.click();
            }
        }
    });
</script>