@using AttendanceApp_ASPNET.Services
@model AttendanceApp_ASPNET.Services.CourseDataResult
@{
    ViewData["Title"] = "My Courses";
}

<div class="courses-page">
    <!-- Error Message Display -->
    @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
    {
        <div class="mb-6 bg-red-50 border border-red-200 rounded-lg p-4 dashboard-card-entrance">
            <div class="flex">
                <div class="flex-shrink-0">
                    <i class="fas fa-exclamation-circle text-red-400"></i>
                </div>
                <div class="ml-3">
                    <p class="text-sm text-red-600">@ViewBag.ErrorMessage</p>
                </div>
            </div>
        </div>
    }

    <!-- Page Header -->
    <div class="mb-8">
        <div class="flex items-center justify-between">
            <div>
                <h1 class="text-3xl font-bold text-gray-900 dashboard-card-entrance">My Courses</h1>
                <p class="text-gray-600 mt-2 dashboard-card-entrance">
                    @if (Model?.StudentInfo?.IsGraduated == true)
                    {
                        @:View your complete academic history and course records
                    }
                    else
                    {
                        @:Manage your enrolled courses and track attendance
                    }
                </p>
            </div>
            @if (Model?.StudentInfo?.IsGraduated != true)
            {
                <div class="text-right dashboard-card-entrance">
                    <div class="text-sm text-gray-500">Academic Year 2024-2025</div>
                    <div class="text-sm text-blue-600 font-medium">
                        @{
                            var sectionName = ViewBag.StudentInfo?.SectionName ?? "No Section Assigned";
                        }
                        @sectionName
                    </div>
                </div>
            }
        </div>
    </div>

    @if (Model?.Success == true)
    {
        <!-- Graduation Status Alert -->
        @if (Model.StudentInfo?.IsGraduated == true)
        {
            <div class="mb-6 bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-lg p-4 dashboard-card-entrance">
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-graduation-cap text-green-500 text-xl"></i>
                    </div>
                    <div class="ml-3">
                        <h4 class="text-lg font-medium text-green-800">Congratulations! ðŸŽ“</h4>
                        <p class="text-sm text-green-700 mt-1">
                            You have graduated from your program. Below you can view your complete academic history and course records.
                        </p>
                    </div>
                </div>
            </div>
        }

        <!-- Current Academic Year Courses Container -->
        @if (!Model.StudentInfo?.IsGraduated == true && Model.CurrentCourses.Any())
        {
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-8 dashboard-card-entrance">
                <div class="p-6 border-b border-gray-200">
                    <div class="flex items-center justify-between">
                        <div>
                            <h2 class="text-xl font-semibold text-gray-900">Current Academic Year @(Model.StudentInfo?.CurrentAcademicYear ?? "2024-2025")</h2>
                            <p class="text-sm text-gray-600 mt-1">Your enrolled courses for this academic year</p>
                        </div>
                        <div class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                            @Model.TotalCurrent Course@(Model.TotalCurrent != 1 ? "s" : "")
                        </div>
                    </div>
                </div>

                <!-- Semester Tabs with Dynamic Data and Flexible Matching -->
                @{
                    // Create a more flexible semester grouping for current courses only
                    var currentCoursesBySemester = new Dictionary<string, List<AttendanceApp_ASPNET.Services.CourseInfo>>();
                    
                    foreach (var course in Model.CurrentCourses.Where(c => c.CourseType == "current"))
                    {
                        var semester = course.Semester?.ToLower().Trim() ?? "";
                        string normalizedSemester;
                        
                        // Normalize semester names to match our tab structure
                        if (semester.Contains("1st") || semester.Contains("first") || semester == "1")
                            normalizedSemester = "1st";
                        else if (semester.Contains("2nd") || semester.Contains("second") || semester == "2")
                            normalizedSemester = "2nd";
                        else if (semester.Contains("3rd") || semester.Contains("third") || semester == "3")
                            normalizedSemester = "3rd";
                        else if (semester.Contains("summer") || semester.Contains("mid") || semester.Contains("mid-year"))
                            normalizedSemester = "Summer";
                        else
                            normalizedSemester = "1st"; // Default fallback
                        
                        if (!currentCoursesBySemester.ContainsKey(normalizedSemester))
                            currentCoursesBySemester[normalizedSemester] = new List<AttendanceApp_ASPNET.Services.CourseInfo>();
                        
                        currentCoursesBySemester[normalizedSemester].Add(course);
                    }
                    
                    var semesters = new[] { "1st", "2nd", "3rd", "Summer" };
                }

                <div class="border-b border-gray-200">
                    <nav class="flex space-x-8 px-6" aria-label="Semester Tabs">
                        @foreach (var semester in semesters)
                        {
                            var courses = currentCoursesBySemester.ContainsKey(semester) ? currentCoursesBySemester[semester] : new List<AttendanceApp_ASPNET.Services.CourseInfo>();
                            var isFirst = semester == semesters.First();
                            
                            <button onclick="showSemester('@semester')" id="tab-@semester" class="semester-tab @(isFirst ? "active-tab border-b-2 border-blue-500 text-blue-600" : "border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300") py-4 px-1 text-sm font-medium transition-all duration-200">
                                @semester Semester
                                <span class="ml-2 @(isFirst ? "bg-blue-100 text-blue-600" : "bg-gray-100 text-gray-600") text-xs px-2 py-0.5 rounded-full">@courses.Count</span>
                            </button>
                        }
                    </nav>
                </div>

                <!-- Semester Content -->
                <div class="p-6">
                    @foreach (var semester in semesters)
                    {
                        var courses = currentCoursesBySemester.ContainsKey(semester) ? currentCoursesBySemester[semester] : new List<AttendanceApp_ASPNET.Services.CourseInfo>();
                        var isFirst = semester == semesters.First();
                        
                        <div id="content-@semester" class="semester-content @(isFirst ? "" : "hidden")">
                            @if (courses.Any())
                            {
                                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                                    @foreach (var course in courses)
                                    {
                                        <div class="course-card bg-gray-50 rounded-lg p-4 border border-gray-200 hover:shadow-lg hover:border-blue-300 transition-all duration-300 cursor-pointer transform hover:scale-105" onclick="openCourseStudents(@course.AssignedCourseId, '@Html.Raw(Html.Encode(course.CourseName))')">
                                            <div class="flex items-start justify-between mb-3">
                                                <div>
                                                    <h3 class="font-semibold text-gray-900 hover:text-blue-600 transition-colors">@course.CourseName</h3>
                                                    <p class="text-sm text-blue-600 font-medium">@course.CourseCode</p>
                                                </div>
                                                <div class="flex items-center space-x-2">
                                                    <span class="@GetStatusBadgeClass(course.EnrollmentStatus) text-xs font-medium px-2 py-1 rounded">
                                                        @GetStatusDisplayText(course.EnrollmentStatus)
                                                    </span>
                                                    <i class="fas fa-arrow-right text-gray-400 text-sm hover:text-blue-500 transition-colors"></i>
                                                </div>
                                            </div>
                                            <p class="text-sm text-gray-600 mb-3">@course.CourseDescription</p>
                                            <div class="flex items-center justify-between text-sm text-gray-500">
                                                <span><i class="fas fa-user-tie mr-1"></i>@course.FacultyName</span>
                                                <span><i class="fas fa-door-open mr-1"></i>@(!string.IsNullOrEmpty(course.Room) ? course.Room : "TBA")</span>
                                            </div>
                                            <div class="mt-2 text-xs text-gray-500">
                                                <span>@course.Semester â€¢ @course.AcademicYear</span>
                                            </div>
                                            <!-- Click indicator -->
                                            <div class="mt-3 flex items-center justify-center text-xs text-gray-500 opacity-75">
                                                <i class="fas fa-mouse-pointer mr-1"></i>
                                                <span>Click to view details</span>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-12">
                                    <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                        <i class="fas fa-@(semester == "Summer" ? "sun" : "calendar-alt") text-gray-400 text-xl"></i>
                                    </div>
                                    <h3 class="text-lg font-medium text-gray-900 mb-2">@semester Semester</h3>
                                    <p class="text-gray-600">No courses enrolled for @semester.ToLower() semester.</p>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
        else if (!Model.StudentInfo?.IsGraduated == true)
        {
            <!-- No Current Courses State for Active Students -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-8 dashboard-card-entrance">
                <div class="p-6 text-center">
                    <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                        <i class="fas fa-book-open text-blue-500 text-xl"></i>
                    </div>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">No Current Courses</h3>
                    <p class="text-gray-600 mb-4">You are not currently enrolled in any courses for the current academic year.</p>
                </div>
            </div>
        }

        <!-- Academic History Container -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 dashboard-card-entrance">
            <div class="p-6 border-b border-gray-200">
                <div class="flex items-center justify-between">
                    <div>
                        <h2 class="text-xl font-semibold text-gray-900">
                            @if (Model.StudentInfo?.IsGraduated == true)
                            {
                                @:Complete Academic History
                            }
                            else if (Model.CurrentCourses.Any())
                            {
                                @:Previous Academic Years
                            }
                            else
                            {
                                @:Academic History
                            }
                        </h2>
                        <p class="text-sm text-gray-600 mt-1">
                            @if (Model.StudentInfo?.IsGraduated == true)
                            {
                                @($"Your complete academic journey from {Model.StudentInfo?.StudentEnrollmentYear} onwards")
                            }
                            else if (Model.CurrentCourses.Any())
                            {
                                @($"Your completed courses from previous academic years")
                            }
                            else
                            {
                                @($"Your academic history and course records")
                            }
                        </p>
                    </div>
                    @if (Model.PreviousCourses.Any())
                    {
                        <div class="flex flex-col items-end space-y-2">
                            <!-- Total Previous Courses Badge -->
                            <div class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full">
                                @Model.TotalPrevious Course@(Model.TotalPrevious != 1 ? "s" : "")
                            </div>
                            
                            <!-- Course Filter -->
                            <div class="relative">
                                <select id="academicYearFilter" class="appearance-none bg-white border border-gray-300 rounded-lg px-3 py-2 pr-8 text-sm font-medium text-gray-700 hover:border-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 cursor-pointer shadow-sm min-w-[150px]">
                                    @if (Model.StudentInfo?.IsGraduated == true || !Model.CurrentCourses.Any())
                                    {
                                        <option value="">All Academic Years</option>
                                    }
                                    else
                                    {
                                        <option value="">All Previous Years</option>
                                    }
                                    @{
                                        var allYears = Model.PreviousCourses.Select(c => c.AcademicYear).Distinct().OrderByDescending(y => y);
                                    }
                                    @foreach (var year in allYears)
                                    {
                                        <option value="@year">@year</option>
                                    }
                                </select>
                                <!-- Custom dropdown arrow -->
                                <div class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
                                    <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                    </svg>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Academic History Content -->
            <div class="p-6" id="previousCoursesContent">
                @if (Model.PreviousCourses.Any())
                {
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6" id="previousCoursesList">
                        @foreach (var course in Model.PreviousCourses)
                        {
                            <div class="course-card bg-gradient-to-br from-gray-50 to-gray-100 rounded-lg p-4 border border-gray-200 hover:shadow-lg hover:border-blue-300 transition-all duration-300 cursor-pointer transform hover:scale-105" 
                                 data-academic-year="@course.AcademicYear" 
                                 onclick="openCourseStudents(@course.AssignedCourseId, '@Html.Raw(Html.Encode(course.CourseName))')">
                                <div class="flex items-start justify-between mb-3">
                                    <div>
                                        <h3 class="font-semibold text-gray-900 hover:text-blue-600 transition-colors">@course.CourseName</h3>
                                        <p class="text-sm text-blue-600 font-medium">@course.CourseCode</p>
                                    </div>
                                    <div class="flex items-center space-x-2">
                                        <span class="@GetStatusBadgeClass(course.EnrollmentStatus) text-xs font-medium px-2.5 py-1 rounded-full">
                                            @GetStatusDisplayText(course.EnrollmentStatus)
                                        </span>
                                        <i class="fas fa-arrow-right text-gray-400 text-sm hover:text-blue-500 transition-colors"></i>
                                    </div>
                                </div>
                                <p class="text-sm text-gray-600 mb-3">@course.CourseDescription</p>
                                <div class="flex items-center justify-between text-sm text-gray-500 mb-3">
                                    <span><i class="fas fa-user-tie mr-1"></i>@course.FacultyName</span>
                                    <span class="font-medium text-blue-600"><i class="fas fa-calendar mr-1"></i>@course.AcademicYear</span>
                                </div>
                                <div class="text-xs text-gray-500 mb-2">
                                    <span>@course.Semester â€¢ Room: @(!string.IsNullOrEmpty(course.Room) ? course.Room : "TBA")</span>
                                </div>
                                @if (!string.IsNullOrEmpty(course.RejectionReason))
                                {
                                    <div class="text-xs text-red-600 bg-red-50 rounded px-2 py-1 mb-2">
                                        <i class="fas fa-info-circle mr-1"></i>@course.RejectionReason
                                    </div>
                                }
                                <!-- Click indicator -->
                                <div class="mt-3 flex items-center justify-center text-xs text-gray-500 opacity-75">
                                    <i class="fas fa-mouse-pointer mr-1"></i>
                                    <span>Click to view details</span>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-12">
                        <div class="w-16 h-16 bg-gradient-to-br from-blue-100 to-indigo-100 rounded-full flex items-center justify-center mx-auto mb-4">
                            <i class="fas fa-history text-blue-500 text-xl"></i>
                        </div>
                        <h3 class="text-lg font-medium text-gray-900 mb-2">No Academic History</h3>
                        <p class="text-gray-600">No courses found from previous academic years.</p>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <!-- Enhanced Error State -->
        <div class="text-center py-12 dashboard-card-entrance">
            <div class="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <i class="fas fa-exclamation-triangle text-red-500 text-xl"></i>
            </div>
            <h3 class="text-lg font-medium text-gray-900 mb-2">Unable to Load Courses</h3>
            <p class="text-gray-600 mb-4">@(Model?.Message ?? "There was an error loading your courses.")</p>
            
            @if (Model?.Message?.Contains("connect") == true || Model?.Message?.Contains("timeout") == true || Model?.Message?.Contains("server") == true)
            {
                <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4 max-w-md mx-auto">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <i class="fas fa-info-circle text-yellow-400"></i>
                        </div>
                        <div class="ml-3 text-left">
                            <h4 class="text-sm font-medium text-yellow-800">Connection Issue</h4>
                            <p class="text-sm text-yellow-700 mt-1">
                                Make sure the Python API server is running on <code class="bg-yellow-100 px-1 rounded">http://localhost:8000</code>
                            </p>
                        </div>
                    </div>
                </div>
            }
            
            <div class="flex justify-center space-x-3">
                <button onclick="window.location.reload()" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors">
                    <i class="fas fa-refresh mr-2"></i>Retry
                </button>
                <button onclick="window.location.href='/Student/Dashboard'" class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 transition-colors">
                    <i class="fas fa-home mr-2"></i>Back to Dashboard
                </button>
            </div>
            
            @if (Model?.Message?.Contains("connect") == true || Model?.Message?.Contains("timeout") == true)
            {
                <div class="mt-6 text-xs text-gray-500">
                    <p>Troubleshooting steps:</p>
                    <ul class="text-left max-w-md mx-auto mt-2 space-y-1">
                        <li>â€¢ Check if the Python API is running</li>
                        <li>â€¢ Verify the API URL in settings</li>
                        <li>â€¢ Check your internet connection</li>
                        <li>â€¢ Try refreshing the page</li>
                    </ul>
                </div>
            }
        </div>
    }
</div>

<!-- Course Students Modal - Move this outside to avoid blur effects -->
@await Html.PartialAsync("_CourseStudentsModal")

@functions {
    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "approved" or "enrolled" => "bg-green-100 text-green-800",
            "pending" => "bg-yellow-100 text-yellow-800",
            "rejected" => "bg-red-100 text-red-800",
            "failed" => "bg-red-100 text-red-800",
            "passed" => "bg-green-100 text-green-800",
            "not_enrolled" => "bg-gray-100 text-gray-800",
            "attended_without_enrollment" => "bg-blue-100 text-blue-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private string GetStatusDisplayText(string status)
    {
        return status switch
        {
            "approved" => "Enrolled",
            "enrolled" => "Enrolled",
            "pending" => "Pending",
            "rejected" => "Rejected",
            "failed" => "Failed",
            "passed" => "Passed",
            "not_enrolled" => "Not Enrolled",
            "attended_without_enrollment" => "Attended",
            _ => FormatStatusText(status)
        };
    }

    private string FormatStatusText(string status)
    {
        if (string.IsNullOrEmpty(status))
            return "Unknown";

        // Replace underscores with spaces and capitalize first letter of each word
        var words = status.Replace("_", " ").Split(' ');
        var result = new System.Text.StringBuilder();
        
        foreach (var word in words)
        {
            if (!string.IsNullOrEmpty(word))
            {
                result.Append(char.ToUpper(word[0]));
                if (word.Length > 1)
                {
                    result.Append(word.Substring(1).ToLower());
                }
                result.Append(" ");
            }
        }
        
        return result.ToString().Trim();
    }
}

<style>
    .semester-tab {
        transition: all 0.15s ease-in-out;
    }
    
    .active-tab {
        color: #2563eb !important;
        border-color: #2563eb !important;
    }
    
    .semester-content {
        animation: fadeIn 0.2s ease-in-out;
    }
    
    .course-card {
        position: relative;
        overflow: hidden;
        transition: all 0.2s ease-in-out;
    }
    
    .course-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.3s ease-in-out;
    }
    
    .course-card:hover::before {
        left: 100%;
    }
    
    .course-card:hover {
        box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }
    
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }

    /* Enhanced modal animations with spring effect */
    .modal-spring-enter {
        animation: modalSpringEnter 0.3s cubic-bezier(0.34, 1.56, 0.64, 1) forwards;
    }

    .modal-spring-exit {
        animation: modalSpringExit 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    }

    @@keyframes modalSpringEnter {
        0% { 
            opacity: 0; 
            transform: scale(0.8) translateY(-20px);
        }
        50% { 
            opacity: 0.8; 
            transform: scale(1.05) translateY(-5px);
        }
        100% { 
            opacity: 1; 
            transform: scale(1) translateY(0);
        }
    }

    @@keyframes modalSpringExit {
        0% { 
            opacity: 1; 
            transform: scale(1) translateY(0);
        }
        100% { 
            opacity: 0; 
            transform: scale(0.9) translateY(-10px);
        }
    }

    /* Smooth table row animations */
    #studentsTableBody tr {
        transition: background-color 0.15s ease-in-out;
    }

    /* Summary cards pulse animation */
    .summary-card-pulse {
        animation: summaryPulse 0.6s ease-out;
    }

    @@keyframes summaryPulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.02); }
        100% { transform: scale(1); }
    }

    /* Quick filter pills */
    .quick-filter-pill {
        transition: all 0.2s ease-in-out;
        cursor: pointer;
    }
    
    .quick-filter-pill:hover {
        transform: translateY(-1px);
        shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .quick-filter-pill.active {
        transform: translateY(-1px);
        shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
    }
    
    /* Custom dropdown styling */
    select:focus {
        outline: none;
    }
    
    /* Enhanced search input styling */
    input[type="text"]:focus {
        outline: none;
        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
    }
    
    /* Export button hover effect */
    button:hover {
        transform: translateY(-1px);
    }

    /* Dynamic clear button styles */
    .clear-btn {
        transition: all 0.3s ease;
        background: none;
        border: none;
    }
    
    .clear-btn-active {
        background: rgba(239, 68, 68, 0.1);
        box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.2);
        animation: clearBtnGlow 2s ease-in-out infinite alternate;
    }
    
    .clear-btn:hover.clear-btn-active {
        background: rgba(239, 68, 68, 0.15);
        box-shadow: 0 0 0 4px rgba(239, 68, 68, 0.25);
    }
    
    @@keyframes clearBtnGlow {
        0% { 
            box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.2);
        }
        100% { 
            box-shadow: 0 0 0 5px rgba(239, 68, 68, 0.1);
        }
    }

    /* Non-enrolled course styling */
    .non-enrolled-course {
        opacity: 0.7;
        cursor: not-allowed !important;
    }
    
    .non-enrolled-course:hover {
        transform: none !important;
        box-shadow: none !important;
    }
    
    .non-enrolled-course::after {
        content: 'ðŸ”’';
        position: absolute;
        top: 8px;
        right: 8px;
        font-size: 14px;
        opacity: 0.6;
    }

    /* Shake animation for denied access */
    @@keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        75% { transform: translateX(5px); }
    }
</style>

<script>
    // Global variables for modal functionality
    let currentAssignedCourseId = null;
    let courseStudentsData = null;
    let filteredStudents = [];

    // Semester tab functionality
    function showSemester(semester) {
        // Hide all semester content
        document.querySelectorAll('.semester-content').forEach(content => {
            content.classList.add('hidden');
        });
        
        // Remove active class from all tabs
        document.querySelectorAll('.semester-tab').forEach(tab => {
            tab.classList.remove('active-tab');
            tab.classList.add('border-transparent', 'text-gray-500');
            tab.classList.remove('border-blue-500', 'text-blue-600');
        });
        
        // Show selected semester content
        document.getElementById(`content-${semester}`).classList.remove('hidden');
        
        // Add active class to selected tab
        const activeTab = document.getElementById(`tab-${semester}`);
        activeTab.classList.add('active-tab');
        activeTab.classList.remove('border-transparent', 'text-gray-500');
        activeTab.classList.add('border-blue-500', 'text-blue-600');
        
        console.log(`Switched to ${semester} semester`);
    }

    // Course Students Modal Functions
    function openCourseStudents(assignedCourseId, courseName) {
        // Check if student is enrolled in this course before opening modal
        if (!isStudentEnrolledInCourse(assignedCourseId)) {
            showEnrollmentError(courseName);
            return;
        }

        currentAssignedCourseId = assignedCourseId;
        
        // Add modal class to body for backdrop effects
        document.body.classList.add('course-modal-open');
        document.body.style.overflow = 'hidden';
        
        // Show modal and start animation immediately
        const modal = document.getElementById('courseStudentsModal');
        const modalContent = document.getElementById('courseStudentsModalContent');
        
        modal.classList.remove('hidden');
        
        // Use requestAnimationFrame for smooth immediate animation
        requestAnimationFrame(() => {
            modalContent.classList.remove('scale-95', 'opacity-0');
            modalContent.classList.add('scale-100', 'opacity-100');
        });
        
        // Reset modal state
        document.getElementById('modalLoadingState').classList.remove('hidden');
        document.getElementById('modalErrorState').classList.add('hidden');
        document.getElementById('modalContentState').classList.add('hidden');
        
        // Set course title
        document.getElementById('modalCourseTitle').textContent = courseName;
        
        // Load course students
        loadCourseStudents(assignedCourseId);
    }

    function isStudentEnrolledInCourse(assignedCourseId) {
        // Check in current courses
        const currentCourses = @Html.Raw(Json.Serialize(Model?.CurrentCourses ?? new List<AttendanceApp_ASPNET.Services.CourseInfo>()));
        const currentEnrolled = currentCourses.some(course => 
            course.assignedCourseId === assignedCourseId && 
            (course.enrollmentStatus === 'approved' || 
             course.enrollmentStatus === 'enrolled' || 
             course.enrollmentStatus === 'passed')
        );

        if (currentEnrolled) return true;

        // Check in previous courses (only if passed)
        const previousCourses = @Html.Raw(Json.Serialize(Model?.PreviousCourses ?? new List<AttendanceApp_ASPNET.Services.CourseInfo>()));
        const previousPassed = previousCourses.some(course => 
            course.assignedCourseId === assignedCourseId && 
            (course.enrollmentStatus === 'approved' || 
             course.enrollmentStatus === 'enrolled' || 
             course.enrollmentStatus === 'passed')
        );

        return previousPassed;
    }

    function showEnrollmentError(courseName) {
        // Create error notification
        const errorNotification = document.createElement('div');
        errorNotification.className = 'fixed top-4 right-4 bg-red-100 border border-red-400 text-red-700 px-6 py-4 rounded-lg shadow-lg z-50 max-w-sm';
        errorNotification.innerHTML = `
            <div class="flex items-start">
                <i class="fas fa-exclamation-triangle mr-3 mt-1 text-red-600"></i>
                <div>
                    <h4 class="font-medium text-red-800">Access Denied</h4>
                    <p class="text-sm mt-1">You are not enrolled in "${courseName}". Only enrolled students can view course details.</p>
                </div>
                <button onclick="this.parentElement.parentElement.remove()" class="ml-4 text-red-600 hover:text-red-800">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;
        
        document.body.appendChild(errorNotification);
        
        // Auto-remove after 5 seconds
        setTimeout(() => {
            if (errorNotification.parentNode) {
                errorNotification.parentNode.removeChild(errorNotification);
            }
        }, 5000);

        // Add shake animation to the course card
        const courseCards = document.querySelectorAll('.course-card');
        courseCards.forEach(card => {
            if (card.onclick && card.onclick.toString().includes(courseName)) {
                card.style.animation = 'shake 0.5s ease-in-out';
                setTimeout(() => {
                    card.style.animation = '';
                }, 500);
            }
        });
    }

    function closeCourseStudentsModal() {
        // Remove modal class from body
        document.body.classList.remove('course-modal-open');
        document.body.style.overflow = 'auto';
        
        // Start exit animation
        const modalContent = document.getElementById('courseStudentsModalContent');
        modalContent.classList.remove('scale-100', 'opacity-100');
        modalContent.classList.add('scale-95', 'opacity-0');
        
        // Hide modal after shorter animation
        setTimeout(() => {
            document.getElementById('courseStudentsModal').classList.add('hidden');
        }, 150);
        
        // Reset variables
        currentAssignedCourseId = null;
        courseStudentsData = null;
        filteredStudents = [];
    }

    function reloadCourseStudents() {
        if (currentAssignedCourseId) {
            document.getElementById('modalErrorState').classList.add('hidden');
            document.getElementById('modalLoadingState').classList.remove('hidden');
            loadCourseStudents(currentAssignedCourseId);
        }
    }

    async function loadCourseStudents(assignedCourseId) {
        try {
            const response = await fetch(`/Student/Courses/${assignedCourseId}/Students`);
            const data = await response.json();
            
            if (data.success) {
                courseStudentsData = data;
                displayCourseStudents(data);
            } else {
                showErrorState(data.message || 'Failed to load course students');
            }
        } catch (error) {
            console.error('Error loading course students:', error);
            showErrorState('Network error occurred while loading students');
        }
    }

    function showErrorState(message) {
        document.getElementById('modalLoadingState').classList.add('hidden');
        document.getElementById('modalContentState').classList.add('hidden');
        document.getElementById('modalErrorState').classList.remove('hidden');
        document.getElementById('modalErrorMessage').textContent = message;
    }

    function displayCourseStudents(data) {
        // Hide loading state
        document.getElementById('modalLoadingState').classList.add('hidden');
        document.getElementById('modalErrorState').classList.add('hidden');
        document.getElementById('modalContentState').classList.remove('hidden');
        
        // Update course info
        if (data.course_info) {
            const courseInfo = `${data.course_info.courseCode} â€¢ ${data.course_info.facultyName} â€¢ ${data.course_info.academicYear} ${data.course_info.semester}`;
            document.getElementById('modalCourseInfo').textContent = courseInfo;
        }
        
        // Update summary cards
        document.getElementById('totalStudentsCount').textContent = data.total_students || 0;
        document.getElementById('enrolledCount').textContent = data.enrollment_summary?.approved || 0;
        document.getElementById('pendingCount').textContent = data.enrollment_summary?.pending || 0;
        
        if (data.attendance_summary) {
            document.getElementById('avgAttendance').textContent = 
                Math.round(data.attendance_summary.averageAttendancePercentage || 0) + '%';
        }
        
        // Store all students for filtering
        filteredStudents = data.students || [];
        
        // Apply initial filters and display
        applyFilters();
    }

    function applyFilters() {
        const searchTerm = document.getElementById('studentSearchInput').value.toLowerCase();
        const sortBy = document.getElementById('sortSelect').value;
        
        let filtered = courseStudentsData.students || [];
        
        // Apply search filter
        if (searchTerm) {
            filtered = filtered.filter(student => 
                student.name.toLowerCase().includes(searchTerm) ||
                student.studentNumber.toLowerCase().includes(searchTerm) ||
                student.email.toLowerCase().includes(searchTerm)
            );
        }
        
        // Apply sorting
        filtered = sortStudents(filtered, sortBy);
        
        filteredStudents = filtered;
        displayStudentsList();
        updateClearButtonState();
    }
    
    function sortStudents(students, sortBy) {
        return students.sort((a, b) => {
            switch (sortBy) {
                case 'name-asc':
                    return a.name.localeCompare(b.name);
                case 'name-desc':
                    return b.name.localeCompare(a.name);
                case 'attendance-desc':
                    return b.attendancePercentage - a.attendancePercentage;
                case 'attendance-asc':
                    return a.attendancePercentage - b.attendancePercentage;
                case 'present-desc':
                    return b.presentCount - a.presentCount;
                case 'status-asc':
                    const statusOrder = { 'enrolled': 1, 'approved': 1, 'passed': 2, 'pending': 3, 'failed': 4, 'rejected': 5 };
                    return (statusOrder[a.enrollmentStatus] || 6) - (statusOrder[b.enrollmentStatus] || 6);
                case 'latest-desc':
                    if (!a.latestAttendanceDate && !b.latestAttendanceDate) return 0;
                    if (!a.latestAttendanceDate) return 1;
                    if (!b.latestAttendanceDate) return -1;
                    return new Date(b.latestAttendanceDate) - new Date(a.latestAttendanceDate);
                default:
                    return 0;
            }
        });
    }

    function quickFilter(filterType) {
        // Update UI for active quick filter
        document.querySelectorAll('.quick-filter-pill').forEach(pill => {
            pill.classList.remove('active', 'bg-blue-100', 'text-blue-700', 'border-blue-200');
            pill.classList.add('bg-gray-100', 'text-gray-600', 'border-gray-200');
        });
        
        const activePill = document.getElementById(`quickFilter-${filterType}`);
        if (activePill) {
            activePill.classList.remove('bg-gray-100', 'text-gray-600', 'border-gray-200');
            activePill.classList.add('active', 'bg-blue-100', 'text-blue-700', 'border-blue-200');
        }
        
        // Apply the filter
        let filtered = courseStudentsData.students || [];
        
        switch (filterType) {
            case 'all':
                // No additional filtering
                break;
            case 'approved':
            case 'enrolled':
                filtered = filtered.filter(student => 
                    student.enrollmentStatus === 'approved' || student.enrollmentStatus === 'enrolled');
                break;
            case 'pending':
                filtered = filtered.filter(student => student.enrollmentStatus === 'pending');
                break;
            case 'failed':
                filtered = filtered.filter(student => student.enrollmentStatus === 'failed');
                break;
            case 'passed':
                filtered = filtered.filter(student => student.enrollmentStatus === 'passed');
                break;
            case 'high-attendance':
                filtered = filtered.filter(student => student.attendancePercentage >= 80);
                filtered = filtered.filter(student => student.attendancePercentage >= 80);
                break;
            case 'low-attendance':
                filtered = filtered.filter(student => student.attendancePercentage < 60);
                break;
        }
        
        // Also apply search term if exists
        const searchTerm = document.getElementById('studentSearchInput').value.toLowerCase();
        if (searchTerm) {
            filtered = filtered.filter(student => 
                student.name.toLowerCase().includes(searchTerm) ||
                student.studentNumber.toLowerCase().includes(searchTerm) ||
                student.email.toLowerCase().includes(searchTerm)
            );
        }
        
        // Apply current sort
        const sortBy = document.getElementById('sortSelect').value;
        filtered = sortStudents(filtered, sortBy);
        
        filteredStudents = filtered;
        displayStudentsList();
        updateClearButtonState();
    }
    
    function clearAllFilters() {
        document.getElementById('studentSearchInput').value = '';
        document.getElementById('sortSelect').value = 'name-asc';
        
        // Reset quick filter pills
        quickFilter('all');
        
        applyFilters();
    }
    
    function updateClearButtonState() {
        const clearBtn = document.getElementById('clearFiltersBtn');
        const searchTerm = document.getElementById('studentSearchInput').value;
        const sortBy = document.getElementById('sortSelect').value;
        const activeQuickFilter = document.querySelector('.quick-filter-pill.active')?.id;
        
        // Check if any filters are active
        const hasActiveFilters = searchTerm || 
                                sortBy !== 'name-asc' || 
                                activeQuickFilter !== 'quickFilter-all';
        
        if (hasActiveFilters) {
            clearBtn.classList.remove('opacity-50', 'text-gray-400');
            clearBtn.classList.add('opacity-100', 'text-red-500', 'clear-btn-active');
        } else {
            clearBtn.classList.remove('opacity-100', 'text-red-500', 'clear-btn-active');
            clearBtn.classList.add('opacity-50', 'text-gray-400');
        }
    }

    // Add entrance animations
    document.addEventListener('DOMContentLoaded', function() {
        const cards = document.querySelectorAll('.dashboard-card-entrance');
        cards.forEach((card, index) => {
            card.style.animationDelay = `${index * 0.1}s`;
        });
        
        // Initialize with first available semester
        const firstTab = document.querySelector('.semester-tab');
        if (firstTab) {
            const semester = firstTab.id.replace('tab-', '');
            showSemester(semester);
        }
        
        // Auto-filter when dropdown changes
        const yearFilter = document.getElementById('academicYearFilter');
        if (yearFilter) {
            yearFilter.addEventListener('change', filterPreviousCourses);
        }
        
        // Setup modal search, filter, and sort event listeners
        const studentSearchInput = document.getElementById('studentSearchInput');
        const sortSelect = document.getElementById('sortSelect');
        
        if (studentSearchInput) {
            studentSearchInput.addEventListener('input', applyFilters);
        }
        
        if (sortSelect) {
            sortSelect.addEventListener('change', applyFilters);
        }
        
        // Close modal on escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                // Close course students modal if open
                if (!document.getElementById('courseStudentsModal').classList.contains('hidden')) {
                    closeCourseStudentsModal();
                    return;
                }
                
                // Close mobile sidebar if open
                const overlay = document.getElementById('mobile-sidebar-overlay');
                if (overlay && !overlay.classList.contains('hidden')) {
                    closeMobileSidebar();
                }
            }
        });
        
        // Close modal when clicking outside - prevent event bubbling
        document.getElementById('courseStudentsModal').addEventListener('click', function(e) {
            if (e.target === this) {
                e.stopPropagation();
                closeCourseStudentsModal();
            }
        });
        
        // Prevent clicks on modal content from closing modal
        const modalContent = document.querySelector('#courseStudentsModal .bg-white');
        if (modalContent) {
            modalContent.addEventListener('click', function(e) {
                e.stopPropagation();
            });
        }
        
        // Make course cards focusable for accessibility and add enrollment check
        const courseCards = document.querySelectorAll('.course-card');
        courseCards.forEach(card => {
            card.setAttribute('tabindex', '0');
            card.setAttribute('role', 'button');
            card.setAttribute('aria-label', 'View course students');
            
            // Add visual indicator for enrollment status
            const enrollmentStatus = getCardEnrollmentStatus(card);
            if (!isEnrolledStatus(enrollmentStatus)) {
                card.classList.add('non-enrolled-course');
                card.setAttribute('aria-label', 'Course details unavailable - not enrolled');
            }
        });
        
        console.log('Courses page loaded successfully!');
    });

    function getCardEnrollmentStatus(card) {
        const statusBadge = card.querySelector('span[class*="bg-"]');
        return statusBadge ? statusBadge.textContent.trim() : '';
    }

    function isEnrolledStatus(status) {
        const enrolledStatuses = ['Enrolled', 'Passed'];
        return enrolledStatuses.includes(status);
    }

    // Add keyboard navigation support with enrollment check
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' || e.key === ' ') {
            const focusedElement = document.activeElement;
            if (focusedElement.classList.contains('course-card')) {
                e.preventDefault();
                
                // Extract course info from the card's onclick
                const onclickStr = focusedElement.getAttribute('onclick');
                if (onclickStr) {
                    const matches = onclickStr.match(/openCourseStudents\((\d+),\s*'([^']+)'\)/);
                    if (matches) {
                        const assignedCourseId = parseInt(matches[1]);
                        const courseName = matches[2];
                        
                        if (!isStudentEnrolledInCourse(assignedCourseId)) {
                            showEnrollmentError(courseName);
                            return;
                        }
                    }
                }
                
                focusedElement.click();
            }
        }
    });
    
    function getLatestAttendanceInfo(student) {
        if (!student.latestAttendanceDate) {
            return '<div class="text-sm text-gray-400">No attendance yet</div>';
        }
        
        const date = new Date(student.latestAttendanceDate);
        const formattedDate = date.toLocaleDateString('en-US', { 
            month: 'short', 
            day: 'numeric',
            year: date.getFullYear() !== new Date().getFullYear() ? 'numeric' : undefined
        });
        
        const statusColors = {
            'present': 'text-green-600',
            'absent': 'text-red-600',
            'late': 'text-yellow-600'
        };
        
        const statusColor = statusColors[student.latestAttendanceStatus?.toLowerCase()] || 'text-gray-600';
        
        return `
            <div class="text-sm ${statusColor} font-medium capitalize">${student.latestAttendanceStatus || 'N/A'}</div>
            <div class="text-xs text-gray-500">${formattedDate}</div>
        `;
    }
    
    function displayStudentsList() {
        const studentsTable = document.getElementById('studentsTable');
        const studentsTableBody = document.getElementById('studentsTableBody');
        const emptyState = document.getElementById('emptyStudentsState');
        
        if (!studentsTable || !studentsTableBody || !emptyState) {
            console.error('Required DOM elements not found for student list display');
            return;
        }
        
        if (filteredStudents.length === 0) {
            studentsTable.classList.add('hidden');
            emptyState.classList.remove('hidden');
            return;
        }
        
        emptyState.classList.add('hidden');
        studentsTable.classList.remove('hidden');
        
        const studentsHTML = filteredStudents.map(student => {
            const statusBadge = getStudentStatusBadge(student.enrollmentStatus);
            const attendanceColor = getAttendanceColor(student.attendancePercentage);
            const latestAttendanceInfo = getLatestAttendanceInfo(student);
            
            return `
                <tr class="hover:bg-gray-50 transition-colors">
                    <td class="px-4 py-3">
                        <div class="flex items-center">
                            <div class="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center mr-3">
                                <span class="text-white font-semibold text-xs">${student.name.split(' ').map(n => n[0]).join('').substring(0, 2)}</span>
                            </div>
                            <div>
                                <div class="font-medium text-gray-900">${student.name}</div>
                                <div class="text-sm text-gray-500">${student.studentNumber}</div>
                                <div class="text-xs text-gray-400">${student.email}</div>
                            </div>
                        </div>
                    </td>
                    <td class="px-4 py-3">
                        <div class="text-sm font-medium text-green-600">${student.presentCount}</div>
                        <div class="text-xs text-gray-500">${student.totalAttendanceSessions > 0 ? ((student.presentCount / student.totalAttendanceSessions) * 100).toFixed(1) + '%' : '0%'}</div>
                    </td>
                    <td class="px-4 py-3">
                        <div class="text-sm font-medium text-yellow-600">${student.lateCount}</div>
                        <div class="text-xs text-gray-500">${student.totalAttendanceSessions > 0 ? ((student.lateCount / student.totalAttendanceSessions) * 100).toFixed(1) + '%' : '0%'}</div>
                    </td>
                    <td class="px-4 py-3">
                        <div class="text-sm font-medium text-red-600">${student.absentCount}</div>
                        <div class="text-xs text-gray-500">${student.totalAttendanceSessions > 0 ? ((student.absentCount / student.totalAttendanceSessions) * 100).toFixed(1) + '%' : '0%'}</div>
                    </td>
                    <td class="px-4 py-3">
                        ${latestAttendanceInfo}
                    </td>
                    <td class="px-4 py-3">
                        ${statusBadge}
                        ${student.rejectionReason ? `
                            <div class="mt-1 text-xs text-red-600">
                                <i class="fas fa-info-circle mr-1"></i>${student.rejectionReason}
                            </div>
                        ` : ''}
                    </td>
                </tr>
            `;
        }).join('');
        
        studentsTableBody.innerHTML = studentsHTML;
    }

    function getStudentStatusBadge(status) {
        const badges = {
            'approved': '<span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Enrolled</span>',
            'enrolled': '<span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Enrolled</span>',
            'pending': '<span class="bg-yellow-100 text-yellow-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Pending</span>',
            'rejected': '<span class="bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Rejected</span>',
            'failed': '<span class="bg-red-100 text-red-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Failed</span>',
            'passed': '<span class="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Passed</span>',
        };
        return badges[status] || '<span class="bg-gray-100 text-gray-800 text-xs font-medium px-2.5 py-0.5 rounded-full">Unknown</span>';
    }

    function getAttendanceColor(percentage) {
        if (percentage >= 80) return 'text-green-600';
        if (percentage >= 60) return 'text-yellow-600';
        return 'text-red-600';
    }

    // Previous courses filter functionality
    function filterPreviousCourses() {
        const selectedYear = document.getElementById('academicYearFilter').value;
        const courseCards = document.querySelectorAll('#previousCoursesList .course-card');
        
        courseCards.forEach(card => {
            const cardYear = card.getAttribute('data-academic-year');
            if (!selectedYear || cardYear === selectedYear) {
                card.style.display = 'block';
            } else {
                card.style.display = 'none';
            }
        });
        
        console.log(`Filtering courses for academic year: ${selectedYear || 'All'}`);
    }

    // Clear academic year filter
    function clearAcademicYearFilter() {
        const academicYearFilter = document.getElementById('academicYearFilter');
        
        if (academicYearFilter) {
            academicYearFilter.value = '';
        }
        
        filterPreviousCourses();
    }

</script>